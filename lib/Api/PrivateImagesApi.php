<?php
/**
 * PrivateImagesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Aurigma\AssetStorage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssetStorage API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\AssetStorage\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aurigma\AssetStorage\ApiException;
use Aurigma\AssetStorage\Configuration;
use Aurigma\AssetStorage\HeaderSelector;
use Aurigma\AssetStorage\ObjectSerializer;

/**
 * PrivateImagesApi Class Doc Comment
 *
 * @category Class
 * @package  Aurigma\AssetStorage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PrivateImagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation privateImagesAddPreview
     *
     * Creates preview entity for specified source entity
     *
     * @param  string $id Source entity unique identifier (required)
     * @param  string $name Preview name (required)
     * @param  string $namespace Preview namespace (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Source entity private storage owner identifier (optional)
     * @param  string $format Preview image format, e.g. Jpeg, Png, Bmp ... (optional)
     * @param  \SplFileObject $file Preview file content (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function privateImagesAddPreview($id, $name, $namespace, $width, $height, $tenant_id = null, $user_id = null, $format = null, $file = null)
    {
        list($response) = $this->privateImagesAddPreviewWithHttpInfo($id, $name, $namespace, $width, $height, $tenant_id, $user_id, $format, $file);
        return $response;
    }

    /**
     * Operation privateImagesAddPreviewWithHttpInfo
     *
     * Creates preview entity for specified source entity
     *
     * @param  string $id Source entity unique identifier (required)
     * @param  string $name Preview name (required)
     * @param  string $namespace Preview namespace (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Source entity private storage owner identifier (optional)
     * @param  string $format Preview image format, e.g. Jpeg, Png, Bmp ... (optional)
     * @param  \SplFileObject $file Preview file content (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesAddPreviewWithHttpInfo($id, $name, $namespace, $width, $height, $tenant_id = null, $user_id = null, $format = null, $file = null)
    {
        $request = $this->privateImagesAddPreviewRequest($id, $name, $namespace, $width, $height, $tenant_id, $user_id, $format, $file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\ImageDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ImageDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesAddPreviewAsync
     *
     * Creates preview entity for specified source entity
     *
     * @param  string $id Source entity unique identifier (required)
     * @param  string $name Preview name (required)
     * @param  string $namespace Preview namespace (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Source entity private storage owner identifier (optional)
     * @param  string $format Preview image format, e.g. Jpeg, Png, Bmp ... (optional)
     * @param  \SplFileObject $file Preview file content (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesAddPreviewAsync($id, $name, $namespace, $width, $height, $tenant_id = null, $user_id = null, $format = null, $file = null)
    {
        return $this->privateImagesAddPreviewAsyncWithHttpInfo($id, $name, $namespace, $width, $height, $tenant_id, $user_id, $format, $file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesAddPreviewAsyncWithHttpInfo
     *
     * Creates preview entity for specified source entity
     *
     * @param  string $id Source entity unique identifier (required)
     * @param  string $name Preview name (required)
     * @param  string $namespace Preview namespace (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Source entity private storage owner identifier (optional)
     * @param  string $format Preview image format, e.g. Jpeg, Png, Bmp ... (optional)
     * @param  \SplFileObject $file Preview file content (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesAddPreviewAsyncWithHttpInfo($id, $name, $namespace, $width, $height, $tenant_id = null, $user_id = null, $format = null, $file = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
        $request = $this->privateImagesAddPreviewRequest($id, $name, $namespace, $width, $height, $tenant_id, $user_id, $format, $file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesAddPreview'
     *
     * @param  string $id Source entity unique identifier (required)
     * @param  string $name Preview name (required)
     * @param  string $namespace Preview namespace (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Source entity private storage owner identifier (optional)
     * @param  string $format Preview image format, e.g. Jpeg, Png, Bmp ... (optional)
     * @param  \SplFileObject $file Preview file content (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesAddPreviewRequest($id, $name, $namespace, $width, $height, $tenant_id = null, $user_id = null, $format = null, $file = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesAddPreview'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling privateImagesAddPreview'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling privateImagesAddPreview'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null || (is_array($width) && count($width) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling privateImagesAddPreview'
            );
        }
        // verify the required parameter 'height' is set
        if ($height === null || (is_array($height) && count($height) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling privateImagesAddPreview'
            );
        }

        $resourcePath = '/api/storage/v1/private-images/{id}/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($namespace !== null) {
            $formParams['namespace'] = ObjectSerializer::toFormValue($namespace);
        }
        // form params
        if ($width !== null) {
            $formParams['width'] = ObjectSerializer::toFormValue($width);
        }
        // form params
        if ($height !== null) {
            $formParams['height'] = ObjectSerializer::toFormValue($height);
        }
        // form params
        if ($format !== null) {
            $formParams['format'] = ObjectSerializer::toFormValue($format);
        }
        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesBatchCopy
     *
     * Copies selected entities and folders to another folder specified by path
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchCopyInput $batch_copy_input Operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function privateImagesBatchCopy($tenant_id = null, $user_id = null, $batch_copy_input = null)
    {
        $this->privateImagesBatchCopyWithHttpInfo($tenant_id, $user_id, $batch_copy_input);
    }

    /**
     * Operation privateImagesBatchCopyWithHttpInfo
     *
     * Copies selected entities and folders to another folder specified by path
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchCopyInput $batch_copy_input Operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesBatchCopyWithHttpInfo($tenant_id = null, $user_id = null, $batch_copy_input = null)
    {
        $request = $this->privateImagesBatchCopyRequest($tenant_id, $user_id, $batch_copy_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\BatchConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesBatchCopyAsync
     *
     * Copies selected entities and folders to another folder specified by path
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchCopyInput $batch_copy_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesBatchCopyAsync($tenant_id = null, $user_id = null, $batch_copy_input = null)
    {
        return $this->privateImagesBatchCopyAsyncWithHttpInfo($tenant_id, $user_id, $batch_copy_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesBatchCopyAsyncWithHttpInfo
     *
     * Copies selected entities and folders to another folder specified by path
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchCopyInput $batch_copy_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesBatchCopyAsyncWithHttpInfo($tenant_id = null, $user_id = null, $batch_copy_input = null)
    {
        $returnType = '';
        $request = $this->privateImagesBatchCopyRequest($tenant_id, $user_id, $batch_copy_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesBatchCopy'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchCopyInput $batch_copy_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesBatchCopyRequest($tenant_id = null, $user_id = null, $batch_copy_input = null)
    {

        $resourcePath = '/api/storage/v1/private-images/batchCopy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_copy_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_copy_input));
            } else {
                $httpBody = $batch_copy_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesBatchDelete
     *
     * Deletes selected entities and folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchDeleteInput $batch_delete_input Operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function privateImagesBatchDelete($tenant_id = null, $user_id = null, $batch_delete_input = null)
    {
        $this->privateImagesBatchDeleteWithHttpInfo($tenant_id, $user_id, $batch_delete_input);
    }

    /**
     * Operation privateImagesBatchDeleteWithHttpInfo
     *
     * Deletes selected entities and folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchDeleteInput $batch_delete_input Operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesBatchDeleteWithHttpInfo($tenant_id = null, $user_id = null, $batch_delete_input = null)
    {
        $request = $this->privateImagesBatchDeleteRequest($tenant_id, $user_id, $batch_delete_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesBatchDeleteAsync
     *
     * Deletes selected entities and folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchDeleteInput $batch_delete_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesBatchDeleteAsync($tenant_id = null, $user_id = null, $batch_delete_input = null)
    {
        return $this->privateImagesBatchDeleteAsyncWithHttpInfo($tenant_id, $user_id, $batch_delete_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesBatchDeleteAsyncWithHttpInfo
     *
     * Deletes selected entities and folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchDeleteInput $batch_delete_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesBatchDeleteAsyncWithHttpInfo($tenant_id = null, $user_id = null, $batch_delete_input = null)
    {
        $returnType = '';
        $request = $this->privateImagesBatchDeleteRequest($tenant_id, $user_id, $batch_delete_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesBatchDelete'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchDeleteInput $batch_delete_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesBatchDeleteRequest($tenant_id = null, $user_id = null, $batch_delete_input = null)
    {

        $resourcePath = '/api/storage/v1/private-images/batchDelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_delete_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_delete_input));
            } else {
                $httpBody = $batch_delete_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesBatchUpdateOwner
     *
     * Updates owner for selected entities and folders
     *
     * @param  string $old_user_id Source private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id New private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateOwnerInput $batch_update_owner_input Operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function privateImagesBatchUpdateOwner($old_user_id = null, $tenant_id = null, $user_id = null, $batch_update_owner_input = null)
    {
        $this->privateImagesBatchUpdateOwnerWithHttpInfo($old_user_id, $tenant_id, $user_id, $batch_update_owner_input);
    }

    /**
     * Operation privateImagesBatchUpdateOwnerWithHttpInfo
     *
     * Updates owner for selected entities and folders
     *
     * @param  string $old_user_id Source private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id New private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateOwnerInput $batch_update_owner_input Operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesBatchUpdateOwnerWithHttpInfo($old_user_id = null, $tenant_id = null, $user_id = null, $batch_update_owner_input = null)
    {
        $request = $this->privateImagesBatchUpdateOwnerRequest($old_user_id, $tenant_id, $user_id, $batch_update_owner_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\BatchConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesBatchUpdateOwnerAsync
     *
     * Updates owner for selected entities and folders
     *
     * @param  string $old_user_id Source private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id New private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateOwnerInput $batch_update_owner_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesBatchUpdateOwnerAsync($old_user_id = null, $tenant_id = null, $user_id = null, $batch_update_owner_input = null)
    {
        return $this->privateImagesBatchUpdateOwnerAsyncWithHttpInfo($old_user_id, $tenant_id, $user_id, $batch_update_owner_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesBatchUpdateOwnerAsyncWithHttpInfo
     *
     * Updates owner for selected entities and folders
     *
     * @param  string $old_user_id Source private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id New private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateOwnerInput $batch_update_owner_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesBatchUpdateOwnerAsyncWithHttpInfo($old_user_id = null, $tenant_id = null, $user_id = null, $batch_update_owner_input = null)
    {
        $returnType = '';
        $request = $this->privateImagesBatchUpdateOwnerRequest($old_user_id, $tenant_id, $user_id, $batch_update_owner_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesBatchUpdateOwner'
     *
     * @param  string $old_user_id Source private storage owner identifier (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id New private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateOwnerInput $batch_update_owner_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesBatchUpdateOwnerRequest($old_user_id = null, $tenant_id = null, $user_id = null, $batch_update_owner_input = null)
    {

        $resourcePath = '/api/storage/v1/private-images/batchUpdateOwner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($old_user_id !== null) {
            if('form' === 'form' && is_array($old_user_id)) {
                foreach($old_user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['oldUserId'] = $old_user_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_update_owner_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_update_owner_input));
            } else {
                $httpBody = $batch_update_owner_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesBatchUpdateParentFolder
     *
     * Updates parent folder for selected entities and folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateParentFolderInput $batch_update_parent_folder_input Operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function privateImagesBatchUpdateParentFolder($tenant_id = null, $user_id = null, $batch_update_parent_folder_input = null)
    {
        $this->privateImagesBatchUpdateParentFolderWithHttpInfo($tenant_id, $user_id, $batch_update_parent_folder_input);
    }

    /**
     * Operation privateImagesBatchUpdateParentFolderWithHttpInfo
     *
     * Updates parent folder for selected entities and folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateParentFolderInput $batch_update_parent_folder_input Operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesBatchUpdateParentFolderWithHttpInfo($tenant_id = null, $user_id = null, $batch_update_parent_folder_input = null)
    {
        $request = $this->privateImagesBatchUpdateParentFolderRequest($tenant_id, $user_id, $batch_update_parent_folder_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\BatchConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesBatchUpdateParentFolderAsync
     *
     * Updates parent folder for selected entities and folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateParentFolderInput $batch_update_parent_folder_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesBatchUpdateParentFolderAsync($tenant_id = null, $user_id = null, $batch_update_parent_folder_input = null)
    {
        return $this->privateImagesBatchUpdateParentFolderAsyncWithHttpInfo($tenant_id, $user_id, $batch_update_parent_folder_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesBatchUpdateParentFolderAsyncWithHttpInfo
     *
     * Updates parent folder for selected entities and folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateParentFolderInput $batch_update_parent_folder_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesBatchUpdateParentFolderAsyncWithHttpInfo($tenant_id = null, $user_id = null, $batch_update_parent_folder_input = null)
    {
        $returnType = '';
        $request = $this->privateImagesBatchUpdateParentFolderRequest($tenant_id, $user_id, $batch_update_parent_folder_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesBatchUpdateParentFolder'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateParentFolderInput $batch_update_parent_folder_input Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesBatchUpdateParentFolderRequest($tenant_id = null, $user_id = null, $batch_update_parent_folder_input = null)
    {

        $resourcePath = '/api/storage/v1/private-images/batchUpdateParentFolder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_update_parent_folder_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_update_parent_folder_input));
            } else {
                $httpBody = $batch_update_parent_folder_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesCopy
     *
     * Copies specified entity
     *
     * @param  string $id Source entity identifier (required)
     * @param  string $path Desired path (optional)
     * @param  string $name Desired name (optional)
     * @param  \Aurigma\AssetStorage\Model\ConflictResolvingStrategy $strategy Conflict resolving strategy (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function privateImagesCopy($id, $path = null, $name = null, $strategy = null, $tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesCopyWithHttpInfo($id, $path, $name, $strategy, $tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesCopyWithHttpInfo
     *
     * Copies specified entity
     *
     * @param  string $id Source entity identifier (required)
     * @param  string $path Desired path (optional)
     * @param  string $name Desired name (optional)
     * @param  \Aurigma\AssetStorage\Model\ConflictResolvingStrategy $strategy Conflict resolving strategy (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesCopyWithHttpInfo($id, $path = null, $name = null, $strategy = null, $tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesCopyRequest($id, $path, $name, $strategy, $tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\AssetStorage\Model\ImageDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ImageDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesCopyAsync
     *
     * Copies specified entity
     *
     * @param  string $id Source entity identifier (required)
     * @param  string $path Desired path (optional)
     * @param  string $name Desired name (optional)
     * @param  \Aurigma\AssetStorage\Model\ConflictResolvingStrategy $strategy Conflict resolving strategy (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesCopyAsync($id, $path = null, $name = null, $strategy = null, $tenant_id = null, $user_id = null)
    {
        return $this->privateImagesCopyAsyncWithHttpInfo($id, $path, $name, $strategy, $tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesCopyAsyncWithHttpInfo
     *
     * Copies specified entity
     *
     * @param  string $id Source entity identifier (required)
     * @param  string $path Desired path (optional)
     * @param  string $name Desired name (optional)
     * @param  \Aurigma\AssetStorage\Model\ConflictResolvingStrategy $strategy Conflict resolving strategy (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesCopyAsyncWithHttpInfo($id, $path = null, $name = null, $strategy = null, $tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
        $request = $this->privateImagesCopyRequest($id, $path, $name, $strategy, $tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesCopy'
     *
     * @param  string $id Source entity identifier (required)
     * @param  string $path Desired path (optional)
     * @param  string $name Desired name (optional)
     * @param  \Aurigma\AssetStorage\Model\ConflictResolvingStrategy $strategy Conflict resolving strategy (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesCopyRequest($id, $path = null, $name = null, $strategy = null, $tenant_id = null, $user_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesCopy'
            );
        }

        $resourcePath = '/api/storage/v1/private-images/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($strategy !== null) {
            if('form' === 'form' && is_array($strategy)) {
                foreach($strategy as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['strategy'] = $strategy;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesCreate
     *
     * Creates new entity
     *
     * @param  string $path Parent folder full path (required)
     * @param  string $name Entity name (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  bool $metadata_is_vector Indicates whether image is vector (optional)
     * @param  int $metadata_width Image width (optional)
     * @param  int $metadata_height Image height (optional)
     * @param  string $metadata_format Image format, e.g. Jpeg, Png, Bmp.. (optional)
     * @param  string $metadata_dpi_x Image horizontal dpi (optional)
     * @param  string $metadata_dpi_y Image vertical dpi (optional)
     * @param  \Aurigma\AssetStorage\Model\ImagePageMetadata[] $metadata_pages Image page metadata list (for multipaged images, like pdf) (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  mixed $custom_fields custom_fields (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function privateImagesCreate($path, $name, $tenant_id = null, $user_id = null, $metadata_is_vector = null, $metadata_width = null, $metadata_height = null, $metadata_format = null, $metadata_dpi_x = null, $metadata_dpi_y = null, $metadata_pages = null, $file = null, $custom_fields = null)
    {
        list($response) = $this->privateImagesCreateWithHttpInfo($path, $name, $tenant_id, $user_id, $metadata_is_vector, $metadata_width, $metadata_height, $metadata_format, $metadata_dpi_x, $metadata_dpi_y, $metadata_pages, $file, $custom_fields);
        return $response;
    }

    /**
     * Operation privateImagesCreateWithHttpInfo
     *
     * Creates new entity
     *
     * @param  string $path Parent folder full path (required)
     * @param  string $name Entity name (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  bool $metadata_is_vector Indicates whether image is vector (optional)
     * @param  int $metadata_width Image width (optional)
     * @param  int $metadata_height Image height (optional)
     * @param  string $metadata_format Image format, e.g. Jpeg, Png, Bmp.. (optional)
     * @param  string $metadata_dpi_x Image horizontal dpi (optional)
     * @param  string $metadata_dpi_y Image vertical dpi (optional)
     * @param  \Aurigma\AssetStorage\Model\ImagePageMetadata[] $metadata_pages Image page metadata list (for multipaged images, like pdf) (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesCreateWithHttpInfo($path, $name, $tenant_id = null, $user_id = null, $metadata_is_vector = null, $metadata_width = null, $metadata_height = null, $metadata_format = null, $metadata_dpi_x = null, $metadata_dpi_y = null, $metadata_pages = null, $file = null, $custom_fields = null)
    {
        $request = $this->privateImagesCreateRequest($path, $name, $tenant_id, $user_id, $metadata_is_vector, $metadata_width, $metadata_height, $metadata_format, $metadata_dpi_x, $metadata_dpi_y, $metadata_pages, $file, $custom_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\AssetStorage\Model\ImageDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ImageDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesCreateAsync
     *
     * Creates new entity
     *
     * @param  string $path Parent folder full path (required)
     * @param  string $name Entity name (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  bool $metadata_is_vector Indicates whether image is vector (optional)
     * @param  int $metadata_width Image width (optional)
     * @param  int $metadata_height Image height (optional)
     * @param  string $metadata_format Image format, e.g. Jpeg, Png, Bmp.. (optional)
     * @param  string $metadata_dpi_x Image horizontal dpi (optional)
     * @param  string $metadata_dpi_y Image vertical dpi (optional)
     * @param  \Aurigma\AssetStorage\Model\ImagePageMetadata[] $metadata_pages Image page metadata list (for multipaged images, like pdf) (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesCreateAsync($path, $name, $tenant_id = null, $user_id = null, $metadata_is_vector = null, $metadata_width = null, $metadata_height = null, $metadata_format = null, $metadata_dpi_x = null, $metadata_dpi_y = null, $metadata_pages = null, $file = null, $custom_fields = null)
    {
        return $this->privateImagesCreateAsyncWithHttpInfo($path, $name, $tenant_id, $user_id, $metadata_is_vector, $metadata_width, $metadata_height, $metadata_format, $metadata_dpi_x, $metadata_dpi_y, $metadata_pages, $file, $custom_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesCreateAsyncWithHttpInfo
     *
     * Creates new entity
     *
     * @param  string $path Parent folder full path (required)
     * @param  string $name Entity name (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  bool $metadata_is_vector Indicates whether image is vector (optional)
     * @param  int $metadata_width Image width (optional)
     * @param  int $metadata_height Image height (optional)
     * @param  string $metadata_format Image format, e.g. Jpeg, Png, Bmp.. (optional)
     * @param  string $metadata_dpi_x Image horizontal dpi (optional)
     * @param  string $metadata_dpi_y Image vertical dpi (optional)
     * @param  \Aurigma\AssetStorage\Model\ImagePageMetadata[] $metadata_pages Image page metadata list (for multipaged images, like pdf) (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesCreateAsyncWithHttpInfo($path, $name, $tenant_id = null, $user_id = null, $metadata_is_vector = null, $metadata_width = null, $metadata_height = null, $metadata_format = null, $metadata_dpi_x = null, $metadata_dpi_y = null, $metadata_pages = null, $file = null, $custom_fields = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
        $request = $this->privateImagesCreateRequest($path, $name, $tenant_id, $user_id, $metadata_is_vector, $metadata_width, $metadata_height, $metadata_format, $metadata_dpi_x, $metadata_dpi_y, $metadata_pages, $file, $custom_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesCreate'
     *
     * @param  string $path Parent folder full path (required)
     * @param  string $name Entity name (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  bool $metadata_is_vector Indicates whether image is vector (optional)
     * @param  int $metadata_width Image width (optional)
     * @param  int $metadata_height Image height (optional)
     * @param  string $metadata_format Image format, e.g. Jpeg, Png, Bmp.. (optional)
     * @param  string $metadata_dpi_x Image horizontal dpi (optional)
     * @param  string $metadata_dpi_y Image vertical dpi (optional)
     * @param  \Aurigma\AssetStorage\Model\ImagePageMetadata[] $metadata_pages Image page metadata list (for multipaged images, like pdf) (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesCreateRequest($path, $name, $tenant_id = null, $user_id = null, $metadata_is_vector = null, $metadata_width = null, $metadata_height = null, $metadata_format = null, $metadata_dpi_x = null, $metadata_dpi_y = null, $metadata_pages = null, $file = null, $custom_fields = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling privateImagesCreate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling privateImagesCreate'
            );
        }
        if (!preg_match("/[^\/:*?\"<>|]*/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling PrivateImagesApi.privateImagesCreate, must conform to the pattern /[^\/:*?\"<>|]*/.");
        }


        $resourcePath = '/api/storage/v1/private-images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }



        // form params
        if ($metadata_is_vector !== null) {
            $formParams['metadata.isVector'] = ObjectSerializer::toFormValue($metadata_is_vector);
        }
        // form params
        if ($metadata_width !== null) {
            $formParams['metadata.width'] = ObjectSerializer::toFormValue($metadata_width);
        }
        // form params
        if ($metadata_height !== null) {
            $formParams['metadata.height'] = ObjectSerializer::toFormValue($metadata_height);
        }
        // form params
        if ($metadata_format !== null) {
            $formParams['metadata.format'] = ObjectSerializer::toFormValue($metadata_format);
        }
        // form params
        if ($metadata_dpi_x !== null) {
            $formParams['metadata.dpiX'] = ObjectSerializer::toFormValue($metadata_dpi_x);
        }
        // form params
        if ($metadata_dpi_y !== null) {
            $formParams['metadata.dpiY'] = ObjectSerializer::toFormValue($metadata_dpi_y);
        }
        // form params
        if ($metadata_pages !== null) {
            $formParams['metadata.pages'] = ObjectSerializer::toFormValue($metadata_pages);
        }
        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($custom_fields !== null) {
            $formParams['customFields'] = ObjectSerializer::toFormValue($custom_fields);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesCreateCollection
     *
     * Creates new collection
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateCollectionDto $create_collection_dto Create operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function privateImagesCreateCollection($tenant_id = null, $user_id = null, $create_collection_dto = null)
    {
        list($response) = $this->privateImagesCreateCollectionWithHttpInfo($tenant_id, $user_id, $create_collection_dto);
        return $response;
    }

    /**
     * Operation privateImagesCreateCollectionWithHttpInfo
     *
     * Creates new collection
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateCollectionDto $create_collection_dto Create operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesCreateCollectionWithHttpInfo($tenant_id = null, $user_id = null, $create_collection_dto = null)
    {
        $request = $this->privateImagesCreateCollectionRequest($tenant_id, $user_id, $create_collection_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\AssetStorage\Model\CollectionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\CollectionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\CollectionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesCreateCollectionAsync
     *
     * Creates new collection
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateCollectionDto $create_collection_dto Create operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesCreateCollectionAsync($tenant_id = null, $user_id = null, $create_collection_dto = null)
    {
        return $this->privateImagesCreateCollectionAsyncWithHttpInfo($tenant_id, $user_id, $create_collection_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesCreateCollectionAsyncWithHttpInfo
     *
     * Creates new collection
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateCollectionDto $create_collection_dto Create operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesCreateCollectionAsyncWithHttpInfo($tenant_id = null, $user_id = null, $create_collection_dto = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
        $request = $this->privateImagesCreateCollectionRequest($tenant_id, $user_id, $create_collection_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesCreateCollection'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateCollectionDto $create_collection_dto Create operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesCreateCollectionRequest($tenant_id = null, $user_id = null, $create_collection_dto = null)
    {

        $resourcePath = '/api/storage/v1/private-images/collections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_collection_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_collection_dto));
            } else {
                $httpBody = $create_collection_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesCreateFolder
     *
     * Creates new folder
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateFolderDto $create_folder_dto Create operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function privateImagesCreateFolder($tenant_id = null, $user_id = null, $create_folder_dto = null)
    {
        list($response) = $this->privateImagesCreateFolderWithHttpInfo($tenant_id, $user_id, $create_folder_dto);
        return $response;
    }

    /**
     * Operation privateImagesCreateFolderWithHttpInfo
     *
     * Creates new folder
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateFolderDto $create_folder_dto Create operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesCreateFolderWithHttpInfo($tenant_id = null, $user_id = null, $create_folder_dto = null)
    {
        $request = $this->privateImagesCreateFolderRequest($tenant_id, $user_id, $create_folder_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\AssetStorage\Model\FolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesCreateFolderAsync
     *
     * Creates new folder
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateFolderDto $create_folder_dto Create operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesCreateFolderAsync($tenant_id = null, $user_id = null, $create_folder_dto = null)
    {
        return $this->privateImagesCreateFolderAsyncWithHttpInfo($tenant_id, $user_id, $create_folder_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesCreateFolderAsyncWithHttpInfo
     *
     * Creates new folder
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateFolderDto $create_folder_dto Create operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesCreateFolderAsyncWithHttpInfo($tenant_id = null, $user_id = null, $create_folder_dto = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
        $request = $this->privateImagesCreateFolderRequest($tenant_id, $user_id, $create_folder_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesCreateFolder'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateFolderDto $create_folder_dto Create operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesCreateFolderRequest($tenant_id = null, $user_id = null, $create_folder_dto = null)
    {

        $resourcePath = '/api/storage/v1/private-images/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_folder_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_folder_dto));
            } else {
                $httpBody = $create_folder_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesDelete
     *
     * Deletes specified entity
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function privateImagesDelete($id, $tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesDeleteWithHttpInfo($id, $tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesDeleteWithHttpInfo
     *
     * Deletes specified entity
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesDeleteWithHttpInfo($id, $tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesDeleteRequest($id, $tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\ImageDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ImageDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesDeleteAsync
     *
     * Deletes specified entity
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesDeleteAsync($id, $tenant_id = null, $user_id = null)
    {
        return $this->privateImagesDeleteAsyncWithHttpInfo($id, $tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesDeleteAsyncWithHttpInfo
     *
     * Deletes specified entity
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesDeleteAsyncWithHttpInfo($id, $tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
        $request = $this->privateImagesDeleteRequest($id, $tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesDelete'
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesDeleteRequest($id, $tenant_id = null, $user_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesDelete'
            );
        }

        $resourcePath = '/api/storage/v1/private-images/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesDeleteCollection
     *
     * Deletes specified collection
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function privateImagesDeleteCollection($id, $tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesDeleteCollectionWithHttpInfo($id, $tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesDeleteCollectionWithHttpInfo
     *
     * Deletes specified collection
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesDeleteCollectionWithHttpInfo($id, $tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesDeleteCollectionRequest($id, $tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\CollectionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\CollectionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\CollectionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesDeleteCollectionAsync
     *
     * Deletes specified collection
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesDeleteCollectionAsync($id, $tenant_id = null, $user_id = null)
    {
        return $this->privateImagesDeleteCollectionAsyncWithHttpInfo($id, $tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesDeleteCollectionAsyncWithHttpInfo
     *
     * Deletes specified collection
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesDeleteCollectionAsyncWithHttpInfo($id, $tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
        $request = $this->privateImagesDeleteCollectionRequest($id, $tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesDeleteCollection'
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesDeleteCollectionRequest($id, $tenant_id = null, $user_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesDeleteCollection'
            );
        }

        $resourcePath = '/api/storage/v1/private-images/collections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesDeleteFolder
     *
     * Deletes specified folder
     *
     * @param  string $full_path Folder full path (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function privateImagesDeleteFolder($full_path = null, $tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesDeleteFolderWithHttpInfo($full_path, $tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesDeleteFolderWithHttpInfo
     *
     * Deletes specified folder
     *
     * @param  string $full_path Folder full path (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesDeleteFolderWithHttpInfo($full_path = null, $tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesDeleteFolderRequest($full_path, $tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesDeleteFolderAsync
     *
     * Deletes specified folder
     *
     * @param  string $full_path Folder full path (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesDeleteFolderAsync($full_path = null, $tenant_id = null, $user_id = null)
    {
        return $this->privateImagesDeleteFolderAsyncWithHttpInfo($full_path, $tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesDeleteFolderAsyncWithHttpInfo
     *
     * Deletes specified folder
     *
     * @param  string $full_path Folder full path (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesDeleteFolderAsyncWithHttpInfo($full_path = null, $tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
        $request = $this->privateImagesDeleteFolderRequest($full_path, $tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesDeleteFolder'
     *
     * @param  string $full_path Folder full path (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesDeleteFolderRequest($full_path = null, $tenant_id = null, $user_id = null)
    {

        $resourcePath = '/api/storage/v1/private-images/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($full_path !== null) {
            if('form' === 'form' && is_array($full_path)) {
                foreach($full_path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fullPath'] = $full_path;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesGet
     *
     * Gets entity by id
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function privateImagesGet($id, $tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesGetWithHttpInfo($id, $tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesGetWithHttpInfo
     *
     * Gets entity by id
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesGetWithHttpInfo($id, $tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesGetRequest($id, $tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\ImageDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ImageDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesGetAsync
     *
     * Gets entity by id
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetAsync($id, $tenant_id = null, $user_id = null)
    {
        return $this->privateImagesGetAsyncWithHttpInfo($id, $tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesGetAsyncWithHttpInfo
     *
     * Gets entity by id
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetAsyncWithHttpInfo($id, $tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
        $request = $this->privateImagesGetRequest($id, $tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesGet'
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesGetRequest($id, $tenant_id = null, $user_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesGet'
            );
        }

        $resourcePath = '/api/storage/v1/private-images/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesGetAll
     *
     * Gets all entities relevant to specified query parameters
     *
     * @param  string $path Folder path filter parameter (optional)
     * @param  bool $include_subfolders If set to &#39;true&#39;, query result will contain list of all entities in desired folder and subfolders (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list (optional)
     * @param  int $take Defines page length (how much consequent items of sorted result list should be taken) (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot; (optional)
     * @param  string $search Search string for partial match (optional)
     * @param  string $custom_fields Custom attributes dictionary filter  &lt;example&gt;{\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;}&lt;/example&gt; (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\PagedOfImageDto
     */
    public function privateImagesGetAll($path = null, $include_subfolders = null, $skip = null, $take = null, $sorting = null, $search = null, $custom_fields = null, $tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesGetAllWithHttpInfo($path, $include_subfolders, $skip, $take, $sorting, $search, $custom_fields, $tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesGetAllWithHttpInfo
     *
     * Gets all entities relevant to specified query parameters
     *
     * @param  string $path Folder path filter parameter (optional)
     * @param  bool $include_subfolders If set to &#39;true&#39;, query result will contain list of all entities in desired folder and subfolders (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list (optional)
     * @param  int $take Defines page length (how much consequent items of sorted result list should be taken) (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot; (optional)
     * @param  string $search Search string for partial match (optional)
     * @param  string $custom_fields Custom attributes dictionary filter  &lt;example&gt;{\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;}&lt;/example&gt; (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\PagedOfImageDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesGetAllWithHttpInfo($path = null, $include_subfolders = null, $skip = null, $take = null, $sorting = null, $search = null, $custom_fields = null, $tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesGetAllRequest($path, $include_subfolders, $skip, $take, $sorting, $search, $custom_fields, $tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\PagedOfImageDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\PagedOfImageDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\PagedOfImageDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\PagedOfImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesGetAllAsync
     *
     * Gets all entities relevant to specified query parameters
     *
     * @param  string $path Folder path filter parameter (optional)
     * @param  bool $include_subfolders If set to &#39;true&#39;, query result will contain list of all entities in desired folder and subfolders (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list (optional)
     * @param  int $take Defines page length (how much consequent items of sorted result list should be taken) (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot; (optional)
     * @param  string $search Search string for partial match (optional)
     * @param  string $custom_fields Custom attributes dictionary filter  &lt;example&gt;{\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;}&lt;/example&gt; (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetAllAsync($path = null, $include_subfolders = null, $skip = null, $take = null, $sorting = null, $search = null, $custom_fields = null, $tenant_id = null, $user_id = null)
    {
        return $this->privateImagesGetAllAsyncWithHttpInfo($path, $include_subfolders, $skip, $take, $sorting, $search, $custom_fields, $tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesGetAllAsyncWithHttpInfo
     *
     * Gets all entities relevant to specified query parameters
     *
     * @param  string $path Folder path filter parameter (optional)
     * @param  bool $include_subfolders If set to &#39;true&#39;, query result will contain list of all entities in desired folder and subfolders (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list (optional)
     * @param  int $take Defines page length (how much consequent items of sorted result list should be taken) (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot; (optional)
     * @param  string $search Search string for partial match (optional)
     * @param  string $custom_fields Custom attributes dictionary filter  &lt;example&gt;{\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;}&lt;/example&gt; (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetAllAsyncWithHttpInfo($path = null, $include_subfolders = null, $skip = null, $take = null, $sorting = null, $search = null, $custom_fields = null, $tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\PagedOfImageDto';
        $request = $this->privateImagesGetAllRequest($path, $include_subfolders, $skip, $take, $sorting, $search, $custom_fields, $tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesGetAll'
     *
     * @param  string $path Folder path filter parameter (optional)
     * @param  bool $include_subfolders If set to &#39;true&#39;, query result will contain list of all entities in desired folder and subfolders (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list (optional)
     * @param  int $take Defines page length (how much consequent items of sorted result list should be taken) (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot; (optional)
     * @param  string $search Search string for partial match (optional)
     * @param  string $custom_fields Custom attributes dictionary filter  &lt;example&gt;{\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;}&lt;/example&gt; (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesGetAllRequest($path = null, $include_subfolders = null, $skip = null, $take = null, $sorting = null, $search = null, $custom_fields = null, $tenant_id = null, $user_id = null)
    {

        $resourcePath = '/api/storage/v1/private-images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }
        // query params
        if ($include_subfolders !== null) {
            if('form' === 'form' && is_array($include_subfolders)) {
                foreach($include_subfolders as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeSubfolders'] = $include_subfolders;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($take !== null) {
            if('form' === 'form' && is_array($take)) {
                foreach($take as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['take'] = $take;
            }
        }
        // query params
        if ($sorting !== null) {
            if('form' === 'form' && is_array($sorting)) {
                foreach($sorting as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sorting'] = $sorting;
            }
        }
        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($custom_fields !== null) {
            if('form' === 'form' && is_array($custom_fields)) {
                foreach($custom_fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customFields'] = $custom_fields;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesGetAllCollections
     *
     * Gets all collections
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\CollectionDto[]
     */
    public function privateImagesGetAllCollections($tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesGetAllCollectionsWithHttpInfo($tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesGetAllCollectionsWithHttpInfo
     *
     * Gets all collections
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\CollectionDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesGetAllCollectionsWithHttpInfo($tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesGetAllCollectionsRequest($tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\CollectionDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\CollectionDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\CollectionDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\CollectionDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesGetAllCollectionsAsync
     *
     * Gets all collections
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetAllCollectionsAsync($tenant_id = null, $user_id = null)
    {
        return $this->privateImagesGetAllCollectionsAsyncWithHttpInfo($tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesGetAllCollectionsAsyncWithHttpInfo
     *
     * Gets all collections
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetAllCollectionsAsyncWithHttpInfo($tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\CollectionDto[]';
        $request = $this->privateImagesGetAllCollectionsRequest($tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesGetAllCollections'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesGetAllCollectionsRequest($tenant_id = null, $user_id = null)
    {

        $resourcePath = '/api/storage/v1/private-images/collections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesGetAllFolders
     *
     * Gets all folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderDto[]
     */
    public function privateImagesGetAllFolders($tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesGetAllFoldersWithHttpInfo($tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesGetAllFoldersWithHttpInfo
     *
     * Gets all folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesGetAllFoldersWithHttpInfo($tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesGetAllFoldersRequest($tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FolderDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesGetAllFoldersAsync
     *
     * Gets all folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetAllFoldersAsync($tenant_id = null, $user_id = null)
    {
        return $this->privateImagesGetAllFoldersAsyncWithHttpInfo($tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesGetAllFoldersAsyncWithHttpInfo
     *
     * Gets all folders
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetAllFoldersAsyncWithHttpInfo($tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderDto[]';
        $request = $this->privateImagesGetAllFoldersRequest($tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesGetAllFolders'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesGetAllFoldersRequest($tenant_id = null, $user_id = null)
    {

        $resourcePath = '/api/storage/v1/private-images/folders/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesGetCollection
     *
     * Gets collection content by collection id
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\CollectionContentOfImageDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function privateImagesGetCollection($id, $tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesGetCollectionWithHttpInfo($id, $tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesGetCollectionWithHttpInfo
     *
     * Gets collection content by collection id
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\CollectionContentOfImageDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesGetCollectionWithHttpInfo($id, $tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesGetCollectionRequest($id, $tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\CollectionContentOfImageDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\CollectionContentOfImageDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\CollectionContentOfImageDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\CollectionContentOfImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesGetCollectionAsync
     *
     * Gets collection content by collection id
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetCollectionAsync($id, $tenant_id = null, $user_id = null)
    {
        return $this->privateImagesGetCollectionAsyncWithHttpInfo($id, $tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesGetCollectionAsyncWithHttpInfo
     *
     * Gets collection content by collection id
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetCollectionAsyncWithHttpInfo($id, $tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\CollectionContentOfImageDto';
        $request = $this->privateImagesGetCollectionRequest($id, $tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesGetCollection'
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesGetCollectionRequest($id, $tenant_id = null, $user_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesGetCollection'
            );
        }

        $resourcePath = '/api/storage/v1/private-images/collections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesGetFile
     *
     * Gets entity file from file storage
     *
     * @param  string $id Entity unique identifier (required)
     * @param  bool $attachment If set to &#39;true&#39;, file will be provided as an attachment with proper filename supplied (default value is &#39;false&#39;) (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function privateImagesGetFile($id, $attachment = null, $tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesGetFileWithHttpInfo($id, $attachment, $tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesGetFileWithHttpInfo
     *
     * Gets entity file from file storage
     *
     * @param  string $id Entity unique identifier (required)
     * @param  bool $attachment If set to &#39;true&#39;, file will be provided as an attachment with proper filename supplied (default value is &#39;false&#39;) (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesGetFileWithHttpInfo($id, $attachment = null, $tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesGetFileRequest($id, $attachment, $tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesGetFileAsync
     *
     * Gets entity file from file storage
     *
     * @param  string $id Entity unique identifier (required)
     * @param  bool $attachment If set to &#39;true&#39;, file will be provided as an attachment with proper filename supplied (default value is &#39;false&#39;) (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetFileAsync($id, $attachment = null, $tenant_id = null, $user_id = null)
    {
        return $this->privateImagesGetFileAsyncWithHttpInfo($id, $attachment, $tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesGetFileAsyncWithHttpInfo
     *
     * Gets entity file from file storage
     *
     * @param  string $id Entity unique identifier (required)
     * @param  bool $attachment If set to &#39;true&#39;, file will be provided as an attachment with proper filename supplied (default value is &#39;false&#39;) (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetFileAsyncWithHttpInfo($id, $attachment = null, $tenant_id = null, $user_id = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->privateImagesGetFileRequest($id, $attachment, $tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesGetFile'
     *
     * @param  string $id Entity unique identifier (required)
     * @param  bool $attachment If set to &#39;true&#39;, file will be provided as an attachment with proper filename supplied (default value is &#39;false&#39;) (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesGetFileRequest($id, $attachment = null, $tenant_id = null, $user_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesGetFile'
            );
        }

        $resourcePath = '/api/storage/v1/private-images/{id}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($attachment !== null) {
            if('form' === 'form' && is_array($attachment)) {
                foreach($attachment as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['attachment'] = $attachment;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesGetFolder
     *
     * Gets folder content by folder path
     *
     * @param  string $full_path Full folder path, if not set then root folder path is used (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderContentOfImageDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function privateImagesGetFolder($full_path = null, $tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesGetFolderWithHttpInfo($full_path, $tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesGetFolderWithHttpInfo
     *
     * Gets folder content by folder path
     *
     * @param  string $full_path Full folder path, if not set then root folder path is used (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderContentOfImageDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesGetFolderWithHttpInfo($full_path = null, $tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesGetFolderRequest($full_path, $tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FolderContentOfImageDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderContentOfImageDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderContentOfImageDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderContentOfImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesGetFolderAsync
     *
     * Gets folder content by folder path
     *
     * @param  string $full_path Full folder path, if not set then root folder path is used (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetFolderAsync($full_path = null, $tenant_id = null, $user_id = null)
    {
        return $this->privateImagesGetFolderAsyncWithHttpInfo($full_path, $tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesGetFolderAsyncWithHttpInfo
     *
     * Gets folder content by folder path
     *
     * @param  string $full_path Full folder path, if not set then root folder path is used (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetFolderAsyncWithHttpInfo($full_path = null, $tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderContentOfImageDto';
        $request = $this->privateImagesGetFolderRequest($full_path, $tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesGetFolder'
     *
     * @param  string $full_path Full folder path, if not set then root folder path is used (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesGetFolderRequest($full_path = null, $tenant_id = null, $user_id = null)
    {

        $resourcePath = '/api/storage/v1/private-images/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($full_path !== null) {
            if('form' === 'form' && is_array($full_path)) {
                foreach($full_path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fullPath'] = $full_path;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesGetFolderInfo
     *
     * Gets folder by id
     *
     * @param  string $id Folder unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function privateImagesGetFolderInfo($id, $tenant_id = null, $user_id = null)
    {
        list($response) = $this->privateImagesGetFolderInfoWithHttpInfo($id, $tenant_id, $user_id);
        return $response;
    }

    /**
     * Operation privateImagesGetFolderInfoWithHttpInfo
     *
     * Gets folder by id
     *
     * @param  string $id Folder unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesGetFolderInfoWithHttpInfo($id, $tenant_id = null, $user_id = null)
    {
        $request = $this->privateImagesGetFolderInfoRequest($id, $tenant_id, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesGetFolderInfoAsync
     *
     * Gets folder by id
     *
     * @param  string $id Folder unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetFolderInfoAsync($id, $tenant_id = null, $user_id = null)
    {
        return $this->privateImagesGetFolderInfoAsyncWithHttpInfo($id, $tenant_id, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesGetFolderInfoAsyncWithHttpInfo
     *
     * Gets folder by id
     *
     * @param  string $id Folder unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesGetFolderInfoAsyncWithHttpInfo($id, $tenant_id = null, $user_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
        $request = $this->privateImagesGetFolderInfoRequest($id, $tenant_id, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesGetFolderInfo'
     *
     * @param  string $id Folder unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesGetFolderInfoRequest($id, $tenant_id = null, $user_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesGetFolderInfo'
            );
        }

        $resourcePath = '/api/storage/v1/private-images/folders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesUpdate
     *
     * Updates specified entity
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  bool $metadata_is_vector Indicates whether image is vector (optional)
     * @param  int $metadata_width Image width (optional)
     * @param  int $metadata_height Image height (optional)
     * @param  string $metadata_format Image format, e.g. Jpeg, Png, Bmp.. (optional)
     * @param  string $metadata_dpi_x Image horizontal dpi (optional)
     * @param  string $metadata_dpi_y Image vertical dpi (optional)
     * @param  \Aurigma\AssetStorage\Model\ImagePageMetadata[] $metadata_pages Image page metadata list (for multipaged images, like pdf) (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  string $path Parent folder full path (optional)
     * @param  string $name Entity name (optional)
     * @param  mixed $custom_fields custom_fields (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function privateImagesUpdate($id, $tenant_id = null, $user_id = null, $metadata_is_vector = null, $metadata_width = null, $metadata_height = null, $metadata_format = null, $metadata_dpi_x = null, $metadata_dpi_y = null, $metadata_pages = null, $file = null, $path = null, $name = null, $custom_fields = null)
    {
        list($response) = $this->privateImagesUpdateWithHttpInfo($id, $tenant_id, $user_id, $metadata_is_vector, $metadata_width, $metadata_height, $metadata_format, $metadata_dpi_x, $metadata_dpi_y, $metadata_pages, $file, $path, $name, $custom_fields);
        return $response;
    }

    /**
     * Operation privateImagesUpdateWithHttpInfo
     *
     * Updates specified entity
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  bool $metadata_is_vector Indicates whether image is vector (optional)
     * @param  int $metadata_width Image width (optional)
     * @param  int $metadata_height Image height (optional)
     * @param  string $metadata_format Image format, e.g. Jpeg, Png, Bmp.. (optional)
     * @param  string $metadata_dpi_x Image horizontal dpi (optional)
     * @param  string $metadata_dpi_y Image vertical dpi (optional)
     * @param  \Aurigma\AssetStorage\Model\ImagePageMetadata[] $metadata_pages Image page metadata list (for multipaged images, like pdf) (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  string $path Parent folder full path (optional)
     * @param  string $name Entity name (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ImageDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesUpdateWithHttpInfo($id, $tenant_id = null, $user_id = null, $metadata_is_vector = null, $metadata_width = null, $metadata_height = null, $metadata_format = null, $metadata_dpi_x = null, $metadata_dpi_y = null, $metadata_pages = null, $file = null, $path = null, $name = null, $custom_fields = null)
    {
        $request = $this->privateImagesUpdateRequest($id, $tenant_id, $user_id, $metadata_is_vector, $metadata_width, $metadata_height, $metadata_format, $metadata_dpi_x, $metadata_dpi_y, $metadata_pages, $file, $path, $name, $custom_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\ImageDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ImageDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesUpdateAsync
     *
     * Updates specified entity
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  bool $metadata_is_vector Indicates whether image is vector (optional)
     * @param  int $metadata_width Image width (optional)
     * @param  int $metadata_height Image height (optional)
     * @param  string $metadata_format Image format, e.g. Jpeg, Png, Bmp.. (optional)
     * @param  string $metadata_dpi_x Image horizontal dpi (optional)
     * @param  string $metadata_dpi_y Image vertical dpi (optional)
     * @param  \Aurigma\AssetStorage\Model\ImagePageMetadata[] $metadata_pages Image page metadata list (for multipaged images, like pdf) (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  string $path Parent folder full path (optional)
     * @param  string $name Entity name (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesUpdateAsync($id, $tenant_id = null, $user_id = null, $metadata_is_vector = null, $metadata_width = null, $metadata_height = null, $metadata_format = null, $metadata_dpi_x = null, $metadata_dpi_y = null, $metadata_pages = null, $file = null, $path = null, $name = null, $custom_fields = null)
    {
        return $this->privateImagesUpdateAsyncWithHttpInfo($id, $tenant_id, $user_id, $metadata_is_vector, $metadata_width, $metadata_height, $metadata_format, $metadata_dpi_x, $metadata_dpi_y, $metadata_pages, $file, $path, $name, $custom_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesUpdateAsyncWithHttpInfo
     *
     * Updates specified entity
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  bool $metadata_is_vector Indicates whether image is vector (optional)
     * @param  int $metadata_width Image width (optional)
     * @param  int $metadata_height Image height (optional)
     * @param  string $metadata_format Image format, e.g. Jpeg, Png, Bmp.. (optional)
     * @param  string $metadata_dpi_x Image horizontal dpi (optional)
     * @param  string $metadata_dpi_y Image vertical dpi (optional)
     * @param  \Aurigma\AssetStorage\Model\ImagePageMetadata[] $metadata_pages Image page metadata list (for multipaged images, like pdf) (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  string $path Parent folder full path (optional)
     * @param  string $name Entity name (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesUpdateAsyncWithHttpInfo($id, $tenant_id = null, $user_id = null, $metadata_is_vector = null, $metadata_width = null, $metadata_height = null, $metadata_format = null, $metadata_dpi_x = null, $metadata_dpi_y = null, $metadata_pages = null, $file = null, $path = null, $name = null, $custom_fields = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ImageDto';
        $request = $this->privateImagesUpdateRequest($id, $tenant_id, $user_id, $metadata_is_vector, $metadata_width, $metadata_height, $metadata_format, $metadata_dpi_x, $metadata_dpi_y, $metadata_pages, $file, $path, $name, $custom_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesUpdate'
     *
     * @param  string $id Entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  bool $metadata_is_vector Indicates whether image is vector (optional)
     * @param  int $metadata_width Image width (optional)
     * @param  int $metadata_height Image height (optional)
     * @param  string $metadata_format Image format, e.g. Jpeg, Png, Bmp.. (optional)
     * @param  string $metadata_dpi_x Image horizontal dpi (optional)
     * @param  string $metadata_dpi_y Image vertical dpi (optional)
     * @param  \Aurigma\AssetStorage\Model\ImagePageMetadata[] $metadata_pages Image page metadata list (for multipaged images, like pdf) (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  string $path Parent folder full path (optional)
     * @param  string $name Entity name (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesUpdateRequest($id, $tenant_id = null, $user_id = null, $metadata_is_vector = null, $metadata_width = null, $metadata_height = null, $metadata_format = null, $metadata_dpi_x = null, $metadata_dpi_y = null, $metadata_pages = null, $file = null, $path = null, $name = null, $custom_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesUpdate'
            );
        }
        if ($name !== null && !preg_match("/[^\/:*?\"<>|]*/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling PrivateImagesApi.privateImagesUpdate, must conform to the pattern /[^\/:*?\"<>|]*/.");
        }


        $resourcePath = '/api/storage/v1/private-images/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($metadata_is_vector !== null) {
            $formParams['metadata.isVector'] = ObjectSerializer::toFormValue($metadata_is_vector);
        }
        // form params
        if ($metadata_width !== null) {
            $formParams['metadata.width'] = ObjectSerializer::toFormValue($metadata_width);
        }
        // form params
        if ($metadata_height !== null) {
            $formParams['metadata.height'] = ObjectSerializer::toFormValue($metadata_height);
        }
        // form params
        if ($metadata_format !== null) {
            $formParams['metadata.format'] = ObjectSerializer::toFormValue($metadata_format);
        }
        // form params
        if ($metadata_dpi_x !== null) {
            $formParams['metadata.dpiX'] = ObjectSerializer::toFormValue($metadata_dpi_x);
        }
        // form params
        if ($metadata_dpi_y !== null) {
            $formParams['metadata.dpiY'] = ObjectSerializer::toFormValue($metadata_dpi_y);
        }
        // form params
        if ($metadata_pages !== null) {
            $formParams['metadata.pages'] = ObjectSerializer::toFormValue($metadata_pages);
        }
        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($custom_fields !== null) {
            $formParams['customFields'] = ObjectSerializer::toFormValue($custom_fields);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesUpdateCollection
     *
     * Updates specified collection
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateCollectionDto $update_collection_dto Update operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function privateImagesUpdateCollection($id, $tenant_id = null, $user_id = null, $update_collection_dto = null)
    {
        list($response) = $this->privateImagesUpdateCollectionWithHttpInfo($id, $tenant_id, $user_id, $update_collection_dto);
        return $response;
    }

    /**
     * Operation privateImagesUpdateCollectionWithHttpInfo
     *
     * Updates specified collection
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateCollectionDto $update_collection_dto Update operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesUpdateCollectionWithHttpInfo($id, $tenant_id = null, $user_id = null, $update_collection_dto = null)
    {
        $request = $this->privateImagesUpdateCollectionRequest($id, $tenant_id, $user_id, $update_collection_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\CollectionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\CollectionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\CollectionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesUpdateCollectionAsync
     *
     * Updates specified collection
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateCollectionDto $update_collection_dto Update operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesUpdateCollectionAsync($id, $tenant_id = null, $user_id = null, $update_collection_dto = null)
    {
        return $this->privateImagesUpdateCollectionAsyncWithHttpInfo($id, $tenant_id, $user_id, $update_collection_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesUpdateCollectionAsyncWithHttpInfo
     *
     * Updates specified collection
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateCollectionDto $update_collection_dto Update operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesUpdateCollectionAsyncWithHttpInfo($id, $tenant_id = null, $user_id = null, $update_collection_dto = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
        $request = $this->privateImagesUpdateCollectionRequest($id, $tenant_id, $user_id, $update_collection_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesUpdateCollection'
     *
     * @param  string $id Collection unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateCollectionDto $update_collection_dto Update operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesUpdateCollectionRequest($id, $tenant_id = null, $user_id = null, $update_collection_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesUpdateCollection'
            );
        }

        $resourcePath = '/api/storage/v1/private-images/collections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_collection_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_collection_dto));
            } else {
                $httpBody = $update_collection_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation privateImagesUpdateFolder
     *
     * Updates specified folder
     *
     * @param  string $id Folder unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateFolderDto $update_folder_dto Update operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function privateImagesUpdateFolder($id, $tenant_id = null, $user_id = null, $update_folder_dto = null)
    {
        list($response) = $this->privateImagesUpdateFolderWithHttpInfo($id, $tenant_id, $user_id, $update_folder_dto);
        return $response;
    }

    /**
     * Operation privateImagesUpdateFolderWithHttpInfo
     *
     * Updates specified folder
     *
     * @param  string $id Folder unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateFolderDto $update_folder_dto Update operation parameters (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function privateImagesUpdateFolderWithHttpInfo($id, $tenant_id = null, $user_id = null, $update_folder_dto = null)
    {
        $request = $this->privateImagesUpdateFolderRequest($id, $tenant_id, $user_id, $update_folder_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation privateImagesUpdateFolderAsync
     *
     * Updates specified folder
     *
     * @param  string $id Folder unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateFolderDto $update_folder_dto Update operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesUpdateFolderAsync($id, $tenant_id = null, $user_id = null, $update_folder_dto = null)
    {
        return $this->privateImagesUpdateFolderAsyncWithHttpInfo($id, $tenant_id, $user_id, $update_folder_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation privateImagesUpdateFolderAsyncWithHttpInfo
     *
     * Updates specified folder
     *
     * @param  string $id Folder unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateFolderDto $update_folder_dto Update operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function privateImagesUpdateFolderAsyncWithHttpInfo($id, $tenant_id = null, $user_id = null, $update_folder_dto = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
        $request = $this->privateImagesUpdateFolderRequest($id, $tenant_id, $user_id, $update_folder_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'privateImagesUpdateFolder'
     *
     * @param  string $id Folder unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $user_id Private storage owner identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateFolderDto $update_folder_dto Update operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function privateImagesUpdateFolderRequest($id, $tenant_id = null, $user_id = null, $update_folder_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling privateImagesUpdateFolder'
            );
        }

        $resourcePath = '/api/storage/v1/private-images/folders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_folder_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_folder_dto));
            } else {
                $httpBody = $update_folder_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
