<?php
/**
 * ColorProfilesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Aurigma\AssetStorage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssetStorage API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\AssetStorage\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aurigma\AssetStorage\ApiException;
use Aurigma\AssetStorage\Configuration;
use Aurigma\AssetStorage\HeaderSelector;
use Aurigma\AssetStorage\ObjectSerializer;

/**
 * ColorProfilesApi Class Doc Comment
 *
 * @category Class
 * @package  Aurigma\AssetStorage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ColorProfilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation colorProfilesBatchCopy
     *
     * Copies the selected entities and folders to another folder specified by path.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchCopyInput $batch_copy_input Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function colorProfilesBatchCopy($tenant_id = null, $batch_copy_input = null)
    {
        $this->colorProfilesBatchCopyWithHttpInfo($tenant_id, $batch_copy_input);
    }

    /**
     * Operation colorProfilesBatchCopyWithHttpInfo
     *
     * Copies the selected entities and folders to another folder specified by path.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchCopyInput $batch_copy_input Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesBatchCopyWithHttpInfo($tenant_id = null, $batch_copy_input = null)
    {
        $request = $this->colorProfilesBatchCopyRequest($tenant_id, $batch_copy_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\BatchConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesBatchCopyAsync
     *
     * Copies the selected entities and folders to another folder specified by path.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchCopyInput $batch_copy_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesBatchCopyAsync($tenant_id = null, $batch_copy_input = null)
    {
        return $this->colorProfilesBatchCopyAsyncWithHttpInfo($tenant_id, $batch_copy_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesBatchCopyAsyncWithHttpInfo
     *
     * Copies the selected entities and folders to another folder specified by path.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchCopyInput $batch_copy_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesBatchCopyAsyncWithHttpInfo($tenant_id = null, $batch_copy_input = null)
    {
        $returnType = '';
        $request = $this->colorProfilesBatchCopyRequest($tenant_id, $batch_copy_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesBatchCopy'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchCopyInput $batch_copy_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesBatchCopyRequest($tenant_id = null, $batch_copy_input = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/batchCopy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_copy_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_copy_input));
            } else {
                $httpBody = $batch_copy_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesBatchDelete
     *
     * Deletes the selected entities and folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchDeleteInput $batch_delete_input Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function colorProfilesBatchDelete($tenant_id = null, $batch_delete_input = null)
    {
        $this->colorProfilesBatchDeleteWithHttpInfo($tenant_id, $batch_delete_input);
    }

    /**
     * Operation colorProfilesBatchDeleteWithHttpInfo
     *
     * Deletes the selected entities and folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchDeleteInput $batch_delete_input Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesBatchDeleteWithHttpInfo($tenant_id = null, $batch_delete_input = null)
    {
        $request = $this->colorProfilesBatchDeleteRequest($tenant_id, $batch_delete_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesBatchDeleteAsync
     *
     * Deletes the selected entities and folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchDeleteInput $batch_delete_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesBatchDeleteAsync($tenant_id = null, $batch_delete_input = null)
    {
        return $this->colorProfilesBatchDeleteAsyncWithHttpInfo($tenant_id, $batch_delete_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesBatchDeleteAsyncWithHttpInfo
     *
     * Deletes the selected entities and folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchDeleteInput $batch_delete_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesBatchDeleteAsyncWithHttpInfo($tenant_id = null, $batch_delete_input = null)
    {
        $returnType = '';
        $request = $this->colorProfilesBatchDeleteRequest($tenant_id, $batch_delete_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesBatchDelete'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchDeleteInput $batch_delete_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesBatchDeleteRequest($tenant_id = null, $batch_delete_input = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/batchDelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_delete_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_delete_input));
            } else {
                $httpBody = $batch_delete_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesBatchUpdateCustomFields
     *
     * Updates the custom fields values for selected entities.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateCustomFieldsInput $batch_update_custom_fields_input Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function colorProfilesBatchUpdateCustomFields($tenant_id = null, $batch_update_custom_fields_input = null)
    {
        $this->colorProfilesBatchUpdateCustomFieldsWithHttpInfo($tenant_id, $batch_update_custom_fields_input);
    }

    /**
     * Operation colorProfilesBatchUpdateCustomFieldsWithHttpInfo
     *
     * Updates the custom fields values for selected entities.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateCustomFieldsInput $batch_update_custom_fields_input Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesBatchUpdateCustomFieldsWithHttpInfo($tenant_id = null, $batch_update_custom_fields_input = null)
    {
        $request = $this->colorProfilesBatchUpdateCustomFieldsRequest($tenant_id, $batch_update_custom_fields_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesBatchUpdateCustomFieldsAsync
     *
     * Updates the custom fields values for selected entities.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateCustomFieldsInput $batch_update_custom_fields_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesBatchUpdateCustomFieldsAsync($tenant_id = null, $batch_update_custom_fields_input = null)
    {
        return $this->colorProfilesBatchUpdateCustomFieldsAsyncWithHttpInfo($tenant_id, $batch_update_custom_fields_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesBatchUpdateCustomFieldsAsyncWithHttpInfo
     *
     * Updates the custom fields values for selected entities.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateCustomFieldsInput $batch_update_custom_fields_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesBatchUpdateCustomFieldsAsyncWithHttpInfo($tenant_id = null, $batch_update_custom_fields_input = null)
    {
        $returnType = '';
        $request = $this->colorProfilesBatchUpdateCustomFieldsRequest($tenant_id, $batch_update_custom_fields_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesBatchUpdateCustomFields'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateCustomFieldsInput $batch_update_custom_fields_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesBatchUpdateCustomFieldsRequest($tenant_id = null, $batch_update_custom_fields_input = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/batchUpdateCustomFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_update_custom_fields_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_update_custom_fields_input));
            } else {
                $httpBody = $batch_update_custom_fields_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesBatchUpdateParentFolder
     *
     * Updates the parent folder for selected entities and folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateParentFolderInput $batch_update_parent_folder_input Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function colorProfilesBatchUpdateParentFolder($tenant_id = null, $batch_update_parent_folder_input = null)
    {
        $this->colorProfilesBatchUpdateParentFolderWithHttpInfo($tenant_id, $batch_update_parent_folder_input);
    }

    /**
     * Operation colorProfilesBatchUpdateParentFolderWithHttpInfo
     *
     * Updates the parent folder for selected entities and folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateParentFolderInput $batch_update_parent_folder_input Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesBatchUpdateParentFolderWithHttpInfo($tenant_id = null, $batch_update_parent_folder_input = null)
    {
        $request = $this->colorProfilesBatchUpdateParentFolderRequest($tenant_id, $batch_update_parent_folder_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\BatchConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesBatchUpdateParentFolderAsync
     *
     * Updates the parent folder for selected entities and folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateParentFolderInput $batch_update_parent_folder_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesBatchUpdateParentFolderAsync($tenant_id = null, $batch_update_parent_folder_input = null)
    {
        return $this->colorProfilesBatchUpdateParentFolderAsyncWithHttpInfo($tenant_id, $batch_update_parent_folder_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesBatchUpdateParentFolderAsyncWithHttpInfo
     *
     * Updates the parent folder for selected entities and folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateParentFolderInput $batch_update_parent_folder_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesBatchUpdateParentFolderAsyncWithHttpInfo($tenant_id = null, $batch_update_parent_folder_input = null)
    {
        $returnType = '';
        $request = $this->colorProfilesBatchUpdateParentFolderRequest($tenant_id, $batch_update_parent_folder_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesBatchUpdateParentFolder'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\BatchUpdateParentFolderInput $batch_update_parent_folder_input Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesBatchUpdateParentFolderRequest($tenant_id = null, $batch_update_parent_folder_input = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/batchUpdateParentFolder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_update_parent_folder_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_update_parent_folder_input));
            } else {
                $httpBody = $batch_update_parent_folder_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesCopy
     *
     * Copies the specified entity.
     *
     * @param  string $id Source entity identifier. (required)
     * @param  string $path Desired path. (optional)
     * @param  string $name Desired name. (optional)
     * @param  \Aurigma\AssetStorage\Model\ConflictResolvingStrategy $strategy Conflict resolving strategy. (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ColorProfileDto|\Aurigma\AssetStorage\Model\NameConflictDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function colorProfilesCopy($id, $path = null, $name = null, $strategy = null, $tenant_id = null)
    {
        list($response) = $this->colorProfilesCopyWithHttpInfo($id, $path, $name, $strategy, $tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesCopyWithHttpInfo
     *
     * Copies the specified entity.
     *
     * @param  string $id Source entity identifier. (required)
     * @param  string $path Desired path. (optional)
     * @param  string $name Desired name. (optional)
     * @param  \Aurigma\AssetStorage\Model\ConflictResolvingStrategy $strategy Conflict resolving strategy. (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ColorProfileDto|\Aurigma\AssetStorage\Model\NameConflictDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesCopyWithHttpInfo($id, $path = null, $name = null, $strategy = null, $tenant_id = null)
    {
        $request = $this->colorProfilesCopyRequest($id, $path, $name, $strategy, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\AssetStorage\Model\ColorProfileDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ColorProfileDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ColorProfileDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ColorProfileDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesCopyAsync
     *
     * Copies the specified entity.
     *
     * @param  string $id Source entity identifier. (required)
     * @param  string $path Desired path. (optional)
     * @param  string $name Desired name. (optional)
     * @param  \Aurigma\AssetStorage\Model\ConflictResolvingStrategy $strategy Conflict resolving strategy. (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesCopyAsync($id, $path = null, $name = null, $strategy = null, $tenant_id = null)
    {
        return $this->colorProfilesCopyAsyncWithHttpInfo($id, $path, $name, $strategy, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesCopyAsyncWithHttpInfo
     *
     * Copies the specified entity.
     *
     * @param  string $id Source entity identifier. (required)
     * @param  string $path Desired path. (optional)
     * @param  string $name Desired name. (optional)
     * @param  \Aurigma\AssetStorage\Model\ConflictResolvingStrategy $strategy Conflict resolving strategy. (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesCopyAsyncWithHttpInfo($id, $path = null, $name = null, $strategy = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ColorProfileDto';
        $request = $this->colorProfilesCopyRequest($id, $path, $name, $strategy, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesCopy'
     *
     * @param  string $id Source entity identifier. (required)
     * @param  string $path Desired path. (optional)
     * @param  string $name Desired name. (optional)
     * @param  \Aurigma\AssetStorage\Model\ConflictResolvingStrategy $strategy Conflict resolving strategy. (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesCopyRequest($id, $path = null, $name = null, $strategy = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling colorProfilesCopy'
            );
        }

        $resourcePath = '/api/storage/v1/colorProfiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($strategy !== null) {
            if('form' === 'form' && is_array($strategy)) {
                foreach($strategy as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['strategy'] = $strategy;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesCreate
     *
     * Creates a new entity.
     *
     * @param  string $path Parent folder full path (required)
     * @param  string $name Entity name (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $metadata_description Color profile description (optional)
     * @param  string $metadata_model Color profile model (optional)
     * @param  string $metadata_copyright Color profile copyright (optional)
     * @param  string $metadata_manufacturer Color profile manufacturer (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorSpace $metadata_color_space metadata_color_space (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorProfileClass $metadata_device_class metadata_device_class (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  mixed $custom_fields custom_fields (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ColorProfileDto|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function colorProfilesCreate($path, $name, $tenant_id = null, $metadata_description = null, $metadata_model = null, $metadata_copyright = null, $metadata_manufacturer = null, $metadata_color_space = null, $metadata_device_class = null, $file = null, $custom_fields = null)
    {
        list($response) = $this->colorProfilesCreateWithHttpInfo($path, $name, $tenant_id, $metadata_description, $metadata_model, $metadata_copyright, $metadata_manufacturer, $metadata_color_space, $metadata_device_class, $file, $custom_fields);
        return $response;
    }

    /**
     * Operation colorProfilesCreateWithHttpInfo
     *
     * Creates a new entity.
     *
     * @param  string $path Parent folder full path (required)
     * @param  string $name Entity name (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $metadata_description Color profile description (optional)
     * @param  string $metadata_model Color profile model (optional)
     * @param  string $metadata_copyright Color profile copyright (optional)
     * @param  string $metadata_manufacturer Color profile manufacturer (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorSpace $metadata_color_space (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorProfileClass $metadata_device_class (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ColorProfileDto|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesCreateWithHttpInfo($path, $name, $tenant_id = null, $metadata_description = null, $metadata_model = null, $metadata_copyright = null, $metadata_manufacturer = null, $metadata_color_space = null, $metadata_device_class = null, $file = null, $custom_fields = null)
    {
        $request = $this->colorProfilesCreateRequest($path, $name, $tenant_id, $metadata_description, $metadata_model, $metadata_copyright, $metadata_manufacturer, $metadata_color_space, $metadata_device_class, $file, $custom_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\AssetStorage\Model\ColorProfileDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ColorProfileDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ColorProfileDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ColorProfileDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesCreateAsync
     *
     * Creates a new entity.
     *
     * @param  string $path Parent folder full path (required)
     * @param  string $name Entity name (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $metadata_description Color profile description (optional)
     * @param  string $metadata_model Color profile model (optional)
     * @param  string $metadata_copyright Color profile copyright (optional)
     * @param  string $metadata_manufacturer Color profile manufacturer (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorSpace $metadata_color_space (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorProfileClass $metadata_device_class (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesCreateAsync($path, $name, $tenant_id = null, $metadata_description = null, $metadata_model = null, $metadata_copyright = null, $metadata_manufacturer = null, $metadata_color_space = null, $metadata_device_class = null, $file = null, $custom_fields = null)
    {
        return $this->colorProfilesCreateAsyncWithHttpInfo($path, $name, $tenant_id, $metadata_description, $metadata_model, $metadata_copyright, $metadata_manufacturer, $metadata_color_space, $metadata_device_class, $file, $custom_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesCreateAsyncWithHttpInfo
     *
     * Creates a new entity.
     *
     * @param  string $path Parent folder full path (required)
     * @param  string $name Entity name (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $metadata_description Color profile description (optional)
     * @param  string $metadata_model Color profile model (optional)
     * @param  string $metadata_copyright Color profile copyright (optional)
     * @param  string $metadata_manufacturer Color profile manufacturer (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorSpace $metadata_color_space (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorProfileClass $metadata_device_class (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesCreateAsyncWithHttpInfo($path, $name, $tenant_id = null, $metadata_description = null, $metadata_model = null, $metadata_copyright = null, $metadata_manufacturer = null, $metadata_color_space = null, $metadata_device_class = null, $file = null, $custom_fields = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ColorProfileDto';
        $request = $this->colorProfilesCreateRequest($path, $name, $tenant_id, $metadata_description, $metadata_model, $metadata_copyright, $metadata_manufacturer, $metadata_color_space, $metadata_device_class, $file, $custom_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesCreate'
     *
     * @param  string $path Parent folder full path (required)
     * @param  string $name Entity name (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $metadata_description Color profile description (optional)
     * @param  string $metadata_model Color profile model (optional)
     * @param  string $metadata_copyright Color profile copyright (optional)
     * @param  string $metadata_manufacturer Color profile manufacturer (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorSpace $metadata_color_space (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorProfileClass $metadata_device_class (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesCreateRequest($path, $name, $tenant_id = null, $metadata_description = null, $metadata_model = null, $metadata_copyright = null, $metadata_manufacturer = null, $metadata_color_space = null, $metadata_device_class = null, $file = null, $custom_fields = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling colorProfilesCreate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling colorProfilesCreate'
            );
        }
        if (!preg_match("/[^\/:*?\"<>|]*/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling ColorProfilesApi.colorProfilesCreate, must conform to the pattern /[^\/:*?\"<>|]*/.");
        }


        $resourcePath = '/api/storage/v1/colorProfiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }



        // form params
        if ($metadata_description !== null) {
            $formParams['metadata.description'] = ObjectSerializer::toFormValue($metadata_description);
        }
        // form params
        if ($metadata_model !== null) {
            $formParams['metadata.model'] = ObjectSerializer::toFormValue($metadata_model);
        }
        // form params
        if ($metadata_copyright !== null) {
            $formParams['metadata.copyright'] = ObjectSerializer::toFormValue($metadata_copyright);
        }
        // form params
        if ($metadata_manufacturer !== null) {
            $formParams['metadata.manufacturer'] = ObjectSerializer::toFormValue($metadata_manufacturer);
        }
        // form params
        if ($metadata_color_space !== null) {
            $formParams['metadata.colorSpace'] = ObjectSerializer::toFormValue($metadata_color_space);
        }
        // form params
        if ($metadata_device_class !== null) {
            $formParams['metadata.deviceClass'] = ObjectSerializer::toFormValue($metadata_device_class);
        }
        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($custom_fields !== null) {
            $formParams['customFields'] = ObjectSerializer::toFormValue($custom_fields);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesCreateCollection
     *
     * Creates a new collection.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateCollectionDto $create_collection_dto Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function colorProfilesCreateCollection($tenant_id = null, $create_collection_dto = null)
    {
        list($response) = $this->colorProfilesCreateCollectionWithHttpInfo($tenant_id, $create_collection_dto);
        return $response;
    }

    /**
     * Operation colorProfilesCreateCollectionWithHttpInfo
     *
     * Creates a new collection.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateCollectionDto $create_collection_dto Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesCreateCollectionWithHttpInfo($tenant_id = null, $create_collection_dto = null)
    {
        $request = $this->colorProfilesCreateCollectionRequest($tenant_id, $create_collection_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\AssetStorage\Model\CollectionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\CollectionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\CollectionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesCreateCollectionAsync
     *
     * Creates a new collection.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateCollectionDto $create_collection_dto Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesCreateCollectionAsync($tenant_id = null, $create_collection_dto = null)
    {
        return $this->colorProfilesCreateCollectionAsyncWithHttpInfo($tenant_id, $create_collection_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesCreateCollectionAsyncWithHttpInfo
     *
     * Creates a new collection.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateCollectionDto $create_collection_dto Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesCreateCollectionAsyncWithHttpInfo($tenant_id = null, $create_collection_dto = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
        $request = $this->colorProfilesCreateCollectionRequest($tenant_id, $create_collection_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesCreateCollection'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateCollectionDto $create_collection_dto Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesCreateCollectionRequest($tenant_id = null, $create_collection_dto = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/collections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_collection_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_collection_dto));
            } else {
                $httpBody = $create_collection_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesCreateFolder
     *
     * Creates a new folder.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateFolderDto $create_folder_dto Create operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function colorProfilesCreateFolder($tenant_id = null, $create_folder_dto = null)
    {
        list($response) = $this->colorProfilesCreateFolderWithHttpInfo($tenant_id, $create_folder_dto);
        return $response;
    }

    /**
     * Operation colorProfilesCreateFolderWithHttpInfo
     *
     * Creates a new folder.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateFolderDto $create_folder_dto Create operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesCreateFolderWithHttpInfo($tenant_id = null, $create_folder_dto = null)
    {
        $request = $this->colorProfilesCreateFolderRequest($tenant_id, $create_folder_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\AssetStorage\Model\FolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesCreateFolderAsync
     *
     * Creates a new folder.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateFolderDto $create_folder_dto Create operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesCreateFolderAsync($tenant_id = null, $create_folder_dto = null)
    {
        return $this->colorProfilesCreateFolderAsyncWithHttpInfo($tenant_id, $create_folder_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesCreateFolderAsyncWithHttpInfo
     *
     * Creates a new folder.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateFolderDto $create_folder_dto Create operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesCreateFolderAsyncWithHttpInfo($tenant_id = null, $create_folder_dto = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
        $request = $this->colorProfilesCreateFolderRequest($tenant_id, $create_folder_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesCreateFolder'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\CreateFolderDto $create_folder_dto Create operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesCreateFolderRequest($tenant_id = null, $create_folder_dto = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_folder_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_folder_dto));
            } else {
                $httpBody = $create_folder_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesDelete
     *
     * Deletes the specified entity.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ColorProfileDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function colorProfilesDelete($id, $tenant_id = null)
    {
        list($response) = $this->colorProfilesDeleteWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesDeleteWithHttpInfo
     *
     * Deletes the specified entity.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ColorProfileDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesDeleteWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->colorProfilesDeleteRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\ColorProfileDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ColorProfileDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ColorProfileDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ColorProfileDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesDeleteAsync
     *
     * Deletes the specified entity.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesDeleteAsync($id, $tenant_id = null)
    {
        return $this->colorProfilesDeleteAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesDeleteAsyncWithHttpInfo
     *
     * Deletes the specified entity.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesDeleteAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ColorProfileDto';
        $request = $this->colorProfilesDeleteRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesDelete'
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesDeleteRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling colorProfilesDelete'
            );
        }

        $resourcePath = '/api/storage/v1/colorProfiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesDeleteCollection
     *
     * Deletes the specified collection.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function colorProfilesDeleteCollection($id, $tenant_id = null)
    {
        list($response) = $this->colorProfilesDeleteCollectionWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesDeleteCollectionWithHttpInfo
     *
     * Deletes the specified collection.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesDeleteCollectionWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->colorProfilesDeleteCollectionRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\CollectionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\CollectionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\CollectionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesDeleteCollectionAsync
     *
     * Deletes the specified collection.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesDeleteCollectionAsync($id, $tenant_id = null)
    {
        return $this->colorProfilesDeleteCollectionAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesDeleteCollectionAsyncWithHttpInfo
     *
     * Deletes the specified collection.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesDeleteCollectionAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
        $request = $this->colorProfilesDeleteCollectionRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesDeleteCollection'
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesDeleteCollectionRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling colorProfilesDeleteCollection'
            );
        }

        $resourcePath = '/api/storage/v1/colorProfiles/collections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesDeleteFolder
     *
     * Deletes the specified folder.
     *
     * @param  string $full_path Folder full path. (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function colorProfilesDeleteFolder($full_path = null, $tenant_id = null)
    {
        list($response) = $this->colorProfilesDeleteFolderWithHttpInfo($full_path, $tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesDeleteFolderWithHttpInfo
     *
     * Deletes the specified folder.
     *
     * @param  string $full_path Folder full path. (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesDeleteFolderWithHttpInfo($full_path = null, $tenant_id = null)
    {
        $request = $this->colorProfilesDeleteFolderRequest($full_path, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesDeleteFolderAsync
     *
     * Deletes the specified folder.
     *
     * @param  string $full_path Folder full path. (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesDeleteFolderAsync($full_path = null, $tenant_id = null)
    {
        return $this->colorProfilesDeleteFolderAsyncWithHttpInfo($full_path, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesDeleteFolderAsyncWithHttpInfo
     *
     * Deletes the specified folder.
     *
     * @param  string $full_path Folder full path. (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesDeleteFolderAsyncWithHttpInfo($full_path = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
        $request = $this->colorProfilesDeleteFolderRequest($full_path, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesDeleteFolder'
     *
     * @param  string $full_path Folder full path. (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesDeleteFolderRequest($full_path = null, $tenant_id = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($full_path !== null) {
            if('form' === 'form' && is_array($full_path)) {
                foreach($full_path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fullPath'] = $full_path;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesGet
     *
     * Returns an entity by ID.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ColorProfileDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function colorProfilesGet($id, $tenant_id = null)
    {
        list($response) = $this->colorProfilesGetWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesGetWithHttpInfo
     *
     * Returns an entity by ID.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ColorProfileDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesGetWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->colorProfilesGetRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\ColorProfileDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ColorProfileDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ColorProfileDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ColorProfileDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesGetAsync
     *
     * Returns an entity by ID.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetAsync($id, $tenant_id = null)
    {
        return $this->colorProfilesGetAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesGetAsyncWithHttpInfo
     *
     * Returns an entity by ID.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ColorProfileDto';
        $request = $this->colorProfilesGetRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesGet'
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesGetRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling colorProfilesGet'
            );
        }

        $resourcePath = '/api/storage/v1/colorProfiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesGetAll
     *
     * Return all entities relevant to specified query parameters.
     *
     * @param  string[] $descriptions Color profile descriptions filter (optional)
     * @param  string $path Folder path filter parameter (optional)
     * @param  bool $include_subfolders If set to &#39;true&#39;, query result will contain list of all entities in desired folder and subfolders (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list (optional)
     * @param  int $take Defines page length (how much consequent items of sorted result list should be taken) (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot; (optional)
     * @param  string $search Search string for partial match (optional)
     * @param  string $custom_fields Custom attributes dictionary filter. For example: &#x60;{\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;}&#x60; (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\PagedOfColorProfileDto
     */
    public function colorProfilesGetAll($descriptions = null, $path = null, $include_subfolders = null, $skip = null, $take = null, $sorting = null, $search = null, $custom_fields = null, $tenant_id = null)
    {
        list($response) = $this->colorProfilesGetAllWithHttpInfo($descriptions, $path, $include_subfolders, $skip, $take, $sorting, $search, $custom_fields, $tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesGetAllWithHttpInfo
     *
     * Return all entities relevant to specified query parameters.
     *
     * @param  string[] $descriptions Color profile descriptions filter (optional)
     * @param  string $path Folder path filter parameter (optional)
     * @param  bool $include_subfolders If set to &#39;true&#39;, query result will contain list of all entities in desired folder and subfolders (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list (optional)
     * @param  int $take Defines page length (how much consequent items of sorted result list should be taken) (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot; (optional)
     * @param  string $search Search string for partial match (optional)
     * @param  string $custom_fields Custom attributes dictionary filter. For example: &#x60;{\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;}&#x60; (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\PagedOfColorProfileDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesGetAllWithHttpInfo($descriptions = null, $path = null, $include_subfolders = null, $skip = null, $take = null, $sorting = null, $search = null, $custom_fields = null, $tenant_id = null)
    {
        $request = $this->colorProfilesGetAllRequest($descriptions, $path, $include_subfolders, $skip, $take, $sorting, $search, $custom_fields, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\PagedOfColorProfileDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\PagedOfColorProfileDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\PagedOfColorProfileDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\PagedOfColorProfileDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesGetAllAsync
     *
     * Return all entities relevant to specified query parameters.
     *
     * @param  string[] $descriptions Color profile descriptions filter (optional)
     * @param  string $path Folder path filter parameter (optional)
     * @param  bool $include_subfolders If set to &#39;true&#39;, query result will contain list of all entities in desired folder and subfolders (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list (optional)
     * @param  int $take Defines page length (how much consequent items of sorted result list should be taken) (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot; (optional)
     * @param  string $search Search string for partial match (optional)
     * @param  string $custom_fields Custom attributes dictionary filter. For example: &#x60;{\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;}&#x60; (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetAllAsync($descriptions = null, $path = null, $include_subfolders = null, $skip = null, $take = null, $sorting = null, $search = null, $custom_fields = null, $tenant_id = null)
    {
        return $this->colorProfilesGetAllAsyncWithHttpInfo($descriptions, $path, $include_subfolders, $skip, $take, $sorting, $search, $custom_fields, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesGetAllAsyncWithHttpInfo
     *
     * Return all entities relevant to specified query parameters.
     *
     * @param  string[] $descriptions Color profile descriptions filter (optional)
     * @param  string $path Folder path filter parameter (optional)
     * @param  bool $include_subfolders If set to &#39;true&#39;, query result will contain list of all entities in desired folder and subfolders (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list (optional)
     * @param  int $take Defines page length (how much consequent items of sorted result list should be taken) (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot; (optional)
     * @param  string $search Search string for partial match (optional)
     * @param  string $custom_fields Custom attributes dictionary filter. For example: &#x60;{\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;}&#x60; (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetAllAsyncWithHttpInfo($descriptions = null, $path = null, $include_subfolders = null, $skip = null, $take = null, $sorting = null, $search = null, $custom_fields = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\PagedOfColorProfileDto';
        $request = $this->colorProfilesGetAllRequest($descriptions, $path, $include_subfolders, $skip, $take, $sorting, $search, $custom_fields, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesGetAll'
     *
     * @param  string[] $descriptions Color profile descriptions filter (optional)
     * @param  string $path Folder path filter parameter (optional)
     * @param  bool $include_subfolders If set to &#39;true&#39;, query result will contain list of all entities in desired folder and subfolders (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list (optional)
     * @param  int $take Defines page length (how much consequent items of sorted result list should be taken) (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot; (optional)
     * @param  string $search Search string for partial match (optional)
     * @param  string $custom_fields Custom attributes dictionary filter. For example: &#x60;{\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;}&#x60; (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesGetAllRequest($descriptions = null, $path = null, $include_subfolders = null, $skip = null, $take = null, $sorting = null, $search = null, $custom_fields = null, $tenant_id = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($descriptions !== null) {
            if('form' === 'form' && is_array($descriptions)) {
                foreach($descriptions as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['descriptions'] = $descriptions;
            }
        }
        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }
        // query params
        if ($include_subfolders !== null) {
            if('form' === 'form' && is_array($include_subfolders)) {
                foreach($include_subfolders as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeSubfolders'] = $include_subfolders;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($take !== null) {
            if('form' === 'form' && is_array($take)) {
                foreach($take as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['take'] = $take;
            }
        }
        // query params
        if ($sorting !== null) {
            if('form' === 'form' && is_array($sorting)) {
                foreach($sorting as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sorting'] = $sorting;
            }
        }
        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($custom_fields !== null) {
            if('form' === 'form' && is_array($custom_fields)) {
                foreach($custom_fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customFields'] = $custom_fields;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesGetAllCollections
     *
     * Returns all collections.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\CollectionDto[]
     */
    public function colorProfilesGetAllCollections($tenant_id = null)
    {
        list($response) = $this->colorProfilesGetAllCollectionsWithHttpInfo($tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesGetAllCollectionsWithHttpInfo
     *
     * Returns all collections.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\CollectionDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesGetAllCollectionsWithHttpInfo($tenant_id = null)
    {
        $request = $this->colorProfilesGetAllCollectionsRequest($tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\CollectionDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\CollectionDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\CollectionDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\CollectionDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesGetAllCollectionsAsync
     *
     * Returns all collections.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetAllCollectionsAsync($tenant_id = null)
    {
        return $this->colorProfilesGetAllCollectionsAsyncWithHttpInfo($tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesGetAllCollectionsAsyncWithHttpInfo
     *
     * Returns all collections.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetAllCollectionsAsyncWithHttpInfo($tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\CollectionDto[]';
        $request = $this->colorProfilesGetAllCollectionsRequest($tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesGetAllCollections'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesGetAllCollectionsRequest($tenant_id = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/collections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesGetAllFolders
     *
     * Returns all folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderDto[]
     */
    public function colorProfilesGetAllFolders($tenant_id = null)
    {
        list($response) = $this->colorProfilesGetAllFoldersWithHttpInfo($tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesGetAllFoldersWithHttpInfo
     *
     * Returns all folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesGetAllFoldersWithHttpInfo($tenant_id = null)
    {
        $request = $this->colorProfilesGetAllFoldersRequest($tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FolderDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesGetAllFoldersAsync
     *
     * Returns all folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetAllFoldersAsync($tenant_id = null)
    {
        return $this->colorProfilesGetAllFoldersAsyncWithHttpInfo($tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesGetAllFoldersAsyncWithHttpInfo
     *
     * Returns all folders.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetAllFoldersAsyncWithHttpInfo($tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderDto[]';
        $request = $this->colorProfilesGetAllFoldersRequest($tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesGetAllFolders'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesGetAllFoldersRequest($tenant_id = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/folders/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesGetCollection
     *
     * Returns the collection content by collection ID.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\CollectionContentOfColorProfileDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function colorProfilesGetCollection($id, $tenant_id = null)
    {
        list($response) = $this->colorProfilesGetCollectionWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesGetCollectionWithHttpInfo
     *
     * Returns the collection content by collection ID.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\CollectionContentOfColorProfileDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesGetCollectionWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->colorProfilesGetCollectionRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\CollectionContentOfColorProfileDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\CollectionContentOfColorProfileDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\CollectionContentOfColorProfileDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\CollectionContentOfColorProfileDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesGetCollectionAsync
     *
     * Returns the collection content by collection ID.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetCollectionAsync($id, $tenant_id = null)
    {
        return $this->colorProfilesGetCollectionAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesGetCollectionAsyncWithHttpInfo
     *
     * Returns the collection content by collection ID.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetCollectionAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\CollectionContentOfColorProfileDto';
        $request = $this->colorProfilesGetCollectionRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesGetCollection'
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesGetCollectionRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling colorProfilesGetCollection'
            );
        }

        $resourcePath = '/api/storage/v1/colorProfiles/collections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesGetFile
     *
     * Returns an entity file from file storage.
     *
     * @param  string $id Entity identifier. (required)
     * @param  bool $attachment Indicates if file should be provided as an attachment with proper filename supplied (default value is &#39;false&#39;). (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function colorProfilesGetFile($id, $attachment = null, $tenant_id = null)
    {
        list($response) = $this->colorProfilesGetFileWithHttpInfo($id, $attachment, $tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesGetFileWithHttpInfo
     *
     * Returns an entity file from file storage.
     *
     * @param  string $id Entity identifier. (required)
     * @param  bool $attachment Indicates if file should be provided as an attachment with proper filename supplied (default value is &#39;false&#39;). (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesGetFileWithHttpInfo($id, $attachment = null, $tenant_id = null)
    {
        $request = $this->colorProfilesGetFileRequest($id, $attachment, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesGetFileAsync
     *
     * Returns an entity file from file storage.
     *
     * @param  string $id Entity identifier. (required)
     * @param  bool $attachment Indicates if file should be provided as an attachment with proper filename supplied (default value is &#39;false&#39;). (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetFileAsync($id, $attachment = null, $tenant_id = null)
    {
        return $this->colorProfilesGetFileAsyncWithHttpInfo($id, $attachment, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesGetFileAsyncWithHttpInfo
     *
     * Returns an entity file from file storage.
     *
     * @param  string $id Entity identifier. (required)
     * @param  bool $attachment Indicates if file should be provided as an attachment with proper filename supplied (default value is &#39;false&#39;). (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetFileAsyncWithHttpInfo($id, $attachment = null, $tenant_id = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->colorProfilesGetFileRequest($id, $attachment, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesGetFile'
     *
     * @param  string $id Entity identifier. (required)
     * @param  bool $attachment Indicates if file should be provided as an attachment with proper filename supplied (default value is &#39;false&#39;). (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesGetFileRequest($id, $attachment = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling colorProfilesGetFile'
            );
        }

        $resourcePath = '/api/storage/v1/colorProfiles/{id}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($attachment !== null) {
            if('form' === 'form' && is_array($attachment)) {
                foreach($attachment as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['attachment'] = $attachment;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesGetFileStorageInfo
     *
     * Returns information about the use of file storage.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FileStorageInfoDto
     */
    public function colorProfilesGetFileStorageInfo($tenant_id = null)
    {
        list($response) = $this->colorProfilesGetFileStorageInfoWithHttpInfo($tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesGetFileStorageInfoWithHttpInfo
     *
     * Returns information about the use of file storage.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FileStorageInfoDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesGetFileStorageInfoWithHttpInfo($tenant_id = null)
    {
        $request = $this->colorProfilesGetFileStorageInfoRequest($tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FileStorageInfoDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FileStorageInfoDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FileStorageInfoDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FileStorageInfoDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesGetFileStorageInfoAsync
     *
     * Returns information about the use of file storage.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetFileStorageInfoAsync($tenant_id = null)
    {
        return $this->colorProfilesGetFileStorageInfoAsyncWithHttpInfo($tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesGetFileStorageInfoAsyncWithHttpInfo
     *
     * Returns information about the use of file storage.
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetFileStorageInfoAsyncWithHttpInfo($tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FileStorageInfoDto';
        $request = $this->colorProfilesGetFileStorageInfoRequest($tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesGetFileStorageInfo'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesGetFileStorageInfoRequest($tenant_id = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/file-storage-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesGetFolder
     *
     * Returns the folder content by folder path.
     *
     * @param  string $full_path Full folder path, if not set then root folder path is used (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderContentOfColorProfileDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function colorProfilesGetFolder($full_path = null, $tenant_id = null)
    {
        list($response) = $this->colorProfilesGetFolderWithHttpInfo($full_path, $tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesGetFolderWithHttpInfo
     *
     * Returns the folder content by folder path.
     *
     * @param  string $full_path Full folder path, if not set then root folder path is used (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderContentOfColorProfileDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesGetFolderWithHttpInfo($full_path = null, $tenant_id = null)
    {
        $request = $this->colorProfilesGetFolderRequest($full_path, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FolderContentOfColorProfileDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderContentOfColorProfileDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderContentOfColorProfileDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderContentOfColorProfileDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesGetFolderAsync
     *
     * Returns the folder content by folder path.
     *
     * @param  string $full_path Full folder path, if not set then root folder path is used (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetFolderAsync($full_path = null, $tenant_id = null)
    {
        return $this->colorProfilesGetFolderAsyncWithHttpInfo($full_path, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesGetFolderAsyncWithHttpInfo
     *
     * Returns the folder content by folder path.
     *
     * @param  string $full_path Full folder path, if not set then root folder path is used (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetFolderAsyncWithHttpInfo($full_path = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderContentOfColorProfileDto';
        $request = $this->colorProfilesGetFolderRequest($full_path, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesGetFolder'
     *
     * @param  string $full_path Full folder path, if not set then root folder path is used (optional)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesGetFolderRequest($full_path = null, $tenant_id = null)
    {

        $resourcePath = '/api/storage/v1/colorProfiles/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($full_path !== null) {
            if('form' === 'form' && is_array($full_path)) {
                foreach($full_path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fullPath'] = $full_path;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesGetFolderInfo
     *
     * Returns a folder by ID.
     *
     * @param  string $id Folder identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails
     */
    public function colorProfilesGetFolderInfo($id, $tenant_id = null)
    {
        list($response) = $this->colorProfilesGetFolderInfoWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation colorProfilesGetFolderInfoWithHttpInfo
     *
     * Returns a folder by ID.
     *
     * @param  string $id Folder identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesGetFolderInfoWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->colorProfilesGetFolderInfoRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesGetFolderInfoAsync
     *
     * Returns a folder by ID.
     *
     * @param  string $id Folder identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetFolderInfoAsync($id, $tenant_id = null)
    {
        return $this->colorProfilesGetFolderInfoAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesGetFolderInfoAsyncWithHttpInfo
     *
     * Returns a folder by ID.
     *
     * @param  string $id Folder identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesGetFolderInfoAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
        $request = $this->colorProfilesGetFolderInfoRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesGetFolderInfo'
     *
     * @param  string $id Folder identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesGetFolderInfoRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling colorProfilesGetFolderInfo'
            );
        }

        $resourcePath = '/api/storage/v1/colorProfiles/folders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesUpdate
     *
     * Updates the specified entity.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $metadata_description Color profile description (optional)
     * @param  string $metadata_model Color profile model (optional)
     * @param  string $metadata_copyright Color profile copyright (optional)
     * @param  string $metadata_manufacturer Color profile manufacturer (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorSpace $metadata_color_space metadata_color_space (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorProfileClass $metadata_device_class metadata_device_class (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  string $path Parent folder full path (optional)
     * @param  string $name Entity name (optional)
     * @param  mixed $custom_fields custom_fields (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\ColorProfileDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function colorProfilesUpdate($id, $tenant_id = null, $metadata_description = null, $metadata_model = null, $metadata_copyright = null, $metadata_manufacturer = null, $metadata_color_space = null, $metadata_device_class = null, $file = null, $path = null, $name = null, $custom_fields = null)
    {
        list($response) = $this->colorProfilesUpdateWithHttpInfo($id, $tenant_id, $metadata_description, $metadata_model, $metadata_copyright, $metadata_manufacturer, $metadata_color_space, $metadata_device_class, $file, $path, $name, $custom_fields);
        return $response;
    }

    /**
     * Operation colorProfilesUpdateWithHttpInfo
     *
     * Updates the specified entity.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $metadata_description Color profile description (optional)
     * @param  string $metadata_model Color profile model (optional)
     * @param  string $metadata_copyright Color profile copyright (optional)
     * @param  string $metadata_manufacturer Color profile manufacturer (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorSpace $metadata_color_space (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorProfileClass $metadata_device_class (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  string $path Parent folder full path (optional)
     * @param  string $name Entity name (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\ColorProfileDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesUpdateWithHttpInfo($id, $tenant_id = null, $metadata_description = null, $metadata_model = null, $metadata_copyright = null, $metadata_manufacturer = null, $metadata_color_space = null, $metadata_device_class = null, $file = null, $path = null, $name = null, $custom_fields = null)
    {
        $request = $this->colorProfilesUpdateRequest($id, $tenant_id, $metadata_description, $metadata_model, $metadata_copyright, $metadata_manufacturer, $metadata_color_space, $metadata_device_class, $file, $path, $name, $custom_fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\ColorProfileDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ColorProfileDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\ColorProfileDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ColorProfileDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesUpdateAsync
     *
     * Updates the specified entity.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $metadata_description Color profile description (optional)
     * @param  string $metadata_model Color profile model (optional)
     * @param  string $metadata_copyright Color profile copyright (optional)
     * @param  string $metadata_manufacturer Color profile manufacturer (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorSpace $metadata_color_space (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorProfileClass $metadata_device_class (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  string $path Parent folder full path (optional)
     * @param  string $name Entity name (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesUpdateAsync($id, $tenant_id = null, $metadata_description = null, $metadata_model = null, $metadata_copyright = null, $metadata_manufacturer = null, $metadata_color_space = null, $metadata_device_class = null, $file = null, $path = null, $name = null, $custom_fields = null)
    {
        return $this->colorProfilesUpdateAsyncWithHttpInfo($id, $tenant_id, $metadata_description, $metadata_model, $metadata_copyright, $metadata_manufacturer, $metadata_color_space, $metadata_device_class, $file, $path, $name, $custom_fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesUpdateAsyncWithHttpInfo
     *
     * Updates the specified entity.
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $metadata_description Color profile description (optional)
     * @param  string $metadata_model Color profile model (optional)
     * @param  string $metadata_copyright Color profile copyright (optional)
     * @param  string $metadata_manufacturer Color profile manufacturer (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorSpace $metadata_color_space (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorProfileClass $metadata_device_class (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  string $path Parent folder full path (optional)
     * @param  string $name Entity name (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesUpdateAsyncWithHttpInfo($id, $tenant_id = null, $metadata_description = null, $metadata_model = null, $metadata_copyright = null, $metadata_manufacturer = null, $metadata_color_space = null, $metadata_device_class = null, $file = null, $path = null, $name = null, $custom_fields = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\ColorProfileDto';
        $request = $this->colorProfilesUpdateRequest($id, $tenant_id, $metadata_description, $metadata_model, $metadata_copyright, $metadata_manufacturer, $metadata_color_space, $metadata_device_class, $file, $path, $name, $custom_fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesUpdate'
     *
     * @param  string $id Entity identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $metadata_description Color profile description (optional)
     * @param  string $metadata_model Color profile model (optional)
     * @param  string $metadata_copyright Color profile copyright (optional)
     * @param  string $metadata_manufacturer Color profile manufacturer (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorSpace $metadata_color_space (optional)
     * @param  \Aurigma\AssetStorage\Model\ColorProfileClass $metadata_device_class (optional)
     * @param  \SplFileObject $file Entity file content (optional)
     * @param  string $path Parent folder full path (optional)
     * @param  string $name Entity name (optional)
     * @param  mixed $custom_fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesUpdateRequest($id, $tenant_id = null, $metadata_description = null, $metadata_model = null, $metadata_copyright = null, $metadata_manufacturer = null, $metadata_color_space = null, $metadata_device_class = null, $file = null, $path = null, $name = null, $custom_fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling colorProfilesUpdate'
            );
        }
        if ($name !== null && !preg_match("/[^\/:*?\"<>|]*/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling ColorProfilesApi.colorProfilesUpdate, must conform to the pattern /[^\/:*?\"<>|]*/.");
        }


        $resourcePath = '/api/storage/v1/colorProfiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($metadata_description !== null) {
            $formParams['metadata.description'] = ObjectSerializer::toFormValue($metadata_description);
        }
        // form params
        if ($metadata_model !== null) {
            $formParams['metadata.model'] = ObjectSerializer::toFormValue($metadata_model);
        }
        // form params
        if ($metadata_copyright !== null) {
            $formParams['metadata.copyright'] = ObjectSerializer::toFormValue($metadata_copyright);
        }
        // form params
        if ($metadata_manufacturer !== null) {
            $formParams['metadata.manufacturer'] = ObjectSerializer::toFormValue($metadata_manufacturer);
        }
        // form params
        if ($metadata_color_space !== null) {
            $formParams['metadata.colorSpace'] = ObjectSerializer::toFormValue($metadata_color_space);
        }
        // form params
        if ($metadata_device_class !== null) {
            $formParams['metadata.deviceClass'] = ObjectSerializer::toFormValue($metadata_device_class);
        }
        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($custom_fields !== null) {
            $formParams['customFields'] = ObjectSerializer::toFormValue($custom_fields);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesUpdateCollection
     *
     * Updates the specified collection.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateCollectionDto $update_collection_dto Update operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function colorProfilesUpdateCollection($id, $tenant_id = null, $update_collection_dto = null)
    {
        list($response) = $this->colorProfilesUpdateCollectionWithHttpInfo($id, $tenant_id, $update_collection_dto);
        return $response;
    }

    /**
     * Operation colorProfilesUpdateCollectionWithHttpInfo
     *
     * Updates the specified collection.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateCollectionDto $update_collection_dto Update operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\CollectionDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesUpdateCollectionWithHttpInfo($id, $tenant_id = null, $update_collection_dto = null)
    {
        $request = $this->colorProfilesUpdateCollectionRequest($id, $tenant_id, $update_collection_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\CollectionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\CollectionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\CollectionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesUpdateCollectionAsync
     *
     * Updates the specified collection.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateCollectionDto $update_collection_dto Update operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesUpdateCollectionAsync($id, $tenant_id = null, $update_collection_dto = null)
    {
        return $this->colorProfilesUpdateCollectionAsyncWithHttpInfo($id, $tenant_id, $update_collection_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesUpdateCollectionAsyncWithHttpInfo
     *
     * Updates the specified collection.
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateCollectionDto $update_collection_dto Update operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesUpdateCollectionAsyncWithHttpInfo($id, $tenant_id = null, $update_collection_dto = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\CollectionDto';
        $request = $this->colorProfilesUpdateCollectionRequest($id, $tenant_id, $update_collection_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesUpdateCollection'
     *
     * @param  string $id Collection identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateCollectionDto $update_collection_dto Update operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesUpdateCollectionRequest($id, $tenant_id = null, $update_collection_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling colorProfilesUpdateCollection'
            );
        }

        $resourcePath = '/api/storage/v1/colorProfiles/collections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_collection_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_collection_dto));
            } else {
                $httpBody = $update_collection_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation colorProfilesUpdateFolder
     *
     * Updates the specified folder.
     *
     * @param  string $id Folder identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateFolderDto $update_folder_dto Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto
     */
    public function colorProfilesUpdateFolder($id, $tenant_id = null, $update_folder_dto = null)
    {
        list($response) = $this->colorProfilesUpdateFolderWithHttpInfo($id, $tenant_id, $update_folder_dto);
        return $response;
    }

    /**
     * Operation colorProfilesUpdateFolderWithHttpInfo
     *
     * Updates the specified folder.
     *
     * @param  string $id Folder identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateFolderDto $update_folder_dto Operation parameters. (optional)
     *
     * @throws \Aurigma\AssetStorage\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetStorage\Model\FolderDto|\Aurigma\AssetStorage\Model\ProblemDetails|\Aurigma\AssetStorage\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function colorProfilesUpdateFolderWithHttpInfo($id, $tenant_id = null, $update_folder_dto = null)
    {
        $request = $this->colorProfilesUpdateFolderRequest($id, $tenant_id, $update_folder_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetStorage\Model\FolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\FolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetStorage\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetStorage\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetStorage\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\FolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetStorage\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation colorProfilesUpdateFolderAsync
     *
     * Updates the specified folder.
     *
     * @param  string $id Folder identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateFolderDto $update_folder_dto Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesUpdateFolderAsync($id, $tenant_id = null, $update_folder_dto = null)
    {
        return $this->colorProfilesUpdateFolderAsyncWithHttpInfo($id, $tenant_id, $update_folder_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation colorProfilesUpdateFolderAsyncWithHttpInfo
     *
     * Updates the specified folder.
     *
     * @param  string $id Folder identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateFolderDto $update_folder_dto Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function colorProfilesUpdateFolderAsyncWithHttpInfo($id, $tenant_id = null, $update_folder_dto = null)
    {
        $returnType = '\Aurigma\AssetStorage\Model\FolderDto';
        $request = $this->colorProfilesUpdateFolderRequest($id, $tenant_id, $update_folder_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'colorProfilesUpdateFolder'
     *
     * @param  string $id Folder identifier. (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetStorage\Model\UpdateFolderDto $update_folder_dto Operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function colorProfilesUpdateFolderRequest($id, $tenant_id = null, $update_folder_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling colorProfilesUpdateFolder'
            );
        }

        $resourcePath = '/api/storage/v1/colorProfiles/folders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_folder_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_folder_dto));
            } else {
                $httpBody = $update_folder_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
