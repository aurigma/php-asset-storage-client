<?php
/**
 * DesignsApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  Aurigma\AssetStorage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssetStorage API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Aurigma\AssetStorage\Test\Api;

use Jumbojett\OpenIDConnectClient;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Client;
use Aurigma\AssetStorage\HeaderSelector;
use Aurigma\AssetStorage\Configuration;
use Aurigma\AssetStorage\Api\DesignsApi;
use Aurigma\AssetStorage\Test\TestConfig;
use PHPUnit\Framework\TestCase;

/**
 * DesignsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Aurigma\AssetStorage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DesignsApiTest extends TestCase
{

    public DesignsApi $clientApi;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $oidc = new OpenIDConnectClient(TestConfig::BACK_OFFICE_URL, TestConfig::CLIENT_ID, TestConfig::CLIENT_SECRET);
        $oidc->setVerifyPeer(TestConfig::VERIFY);
        $oidc->providerConfigParam(array('token_endpoint'=> TestConfig::BACK_OFFICE_URL.'/connect/token'));

        // this assumes success (to validate check if the access_token property is there and a valid JWT) :
        $accessToken = $oidc->requestClientCredentialsToken()->access_token;

        $client = new \GuzzleHttp\Client([
            // Base URI is used with relative requests
            'base_uri' => TestConfig::ASSET_STORAGE_API_URL,
            // You can set any number of default request options.
            'timeout'  => TestConfig::TIMEOUT,
            'verify' => TestConfig::VERIFY,
        ]);
        
        $selector = new HeaderSelector();
        $config = new Configuration();
        
        $config->setAccessToken($accessToken);
        $config->setHost(TestConfig::ASSET_STORAGE_API_URL);
        $this->clientApi = new DesignsApi($client, $config, $selector);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for designsAddPreview
     *
     * Creates preview entity for specified source entity.
     *
     */
    public function testDesignsAddPreview()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsBatchCopy
     *
     * Copies selected entities and folders to another folder specified by path.
     *
     */
    public function testDesignsBatchCopy()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsBatchDelete
     *
     * Deletes selected entities and folders.
     *
     */
    public function testDesignsBatchDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsBatchUpdateParentFolder
     *
     * Updates parent folder for selected entities and folders.
     *
     */
    public function testDesignsBatchUpdateParentFolder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsCopy
     *
     * Copies specified entity.
     *
     */
    public function testDesignsCopy()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsCreate
     *
     * Creates new entity.
     *
     */
    public function testDesignsCreate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsCreateCollection
     *
     * Creates new collection.
     *
     */
    public function testDesignsCreateCollection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsCreateFolder
     *
     * Creates new folder.
     *
     */
    public function testDesignsCreateFolder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsDelete
     *
     * Deletes specified entity.
     *
     */
    public function testDesignsDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsDeleteCollection
     *
     * Deletes specified collection.
     *
     */
    public function testDesignsDeleteCollection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsDeleteFolder
     *
     * Deletes specified folder.
     *
     */
    public function testDesignsDeleteFolder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsGet
     *
     * Gets entity by id.
     *
     */
    public function testDesignsGet()
    {
        $responseAll = $this->clientApi->designsGetAll();
        $this->assertInstanceOf('Aurigma\AssetStorage\Model\PagedOfDesignDto', $responseAll);
        $items = $responseAll->getItems();
        $this->assertGreaterThanOrEqual(1, count($items), "The designs collection does not have any item! Can't test get by id function.");
        $response = $this->clientApi->designsGet($items[0]->getId());
        $this->assertInstanceOf('Aurigma\AssetStorage\Model\DesignDto', $response);
    }

    /**
     * Test case for designsGetAll
     *
     * Gets all entities relevant to specified query parameters.
     *
     */
    public function testDesignsGetAll()
    {
        $response = $this->clientApi->designsGetAll();
        $this->assertInstanceOf('Aurigma\AssetStorage\Model\PagedOfDesignDto', $response);
    }

    /**
     * Test case for designsGetAllCollections
     *
     * Gets all collections.
     *
     */
    public function testDesignsGetAllCollections()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsGetAllFolders
     *
     * Gets all folders.
     *
     */
    public function testDesignsGetAllFolders()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsGetCollection
     *
     * Gets collection content by collection id.
     *
     */
    public function testDesignsGetCollection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsGetFile
     *
     * Gets entity file from file storage.
     *
     */
    public function testDesignsGetFile()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsGetFolder
     *
     * Gets folder content by folder path.
     *
     */
    public function testDesignsGetFolder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsGetFolderInfo
     *
     * Gets folder by id.
     *
     */
    public function testDesignsGetFolderInfo()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsUpdate
     *
     * Updates specified entity.
     *
     */
    public function testDesignsUpdate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsUpdateCollection
     *
     * Updates specified collection.
     *
     */
    public function testDesignsUpdateCollection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for designsUpdateFolder
     *
     * Updates specified folder.
     *
     */
    public function testDesignsUpdateFolder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
